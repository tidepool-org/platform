// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -source=provider.go -destination=test/provider_mocks.go -package=test DataSetClient
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	auth "github.com/tidepool-org/platform/auth"
	data "github.com/tidepool-org/platform/data"
	source "github.com/tidepool-org/platform/data/source"
	page "github.com/tidepool-org/platform/page"
	request "github.com/tidepool-org/platform/request"
)

// MockProviderSessionClient is a mock of ProviderSessionClient interface.
type MockProviderSessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockProviderSessionClientMockRecorder
	isgomock struct{}
}

// MockProviderSessionClientMockRecorder is the mock recorder for MockProviderSessionClient.
type MockProviderSessionClientMockRecorder struct {
	mock *MockProviderSessionClient
}

// NewMockProviderSessionClient creates a new mock instance.
func NewMockProviderSessionClient(ctrl *gomock.Controller) *MockProviderSessionClient {
	mock := &MockProviderSessionClient{ctrl: ctrl}
	mock.recorder = &MockProviderSessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderSessionClient) EXPECT() *MockProviderSessionClientMockRecorder {
	return m.recorder
}

// DeleteProviderSession mocks base method.
func (m *MockProviderSessionClient) DeleteProviderSession(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProviderSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProviderSession indicates an expected call of DeleteProviderSession.
func (mr *MockProviderSessionClientMockRecorder) DeleteProviderSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProviderSession", reflect.TypeOf((*MockProviderSessionClient)(nil).DeleteProviderSession), ctx, id)
}

// UpdateProviderSession mocks base method.
func (m *MockProviderSessionClient) UpdateProviderSession(ctx context.Context, id string, update *auth.ProviderSessionUpdate) (*auth.ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProviderSession", ctx, id, update)
	ret0, _ := ret[0].(*auth.ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProviderSession indicates an expected call of UpdateProviderSession.
func (mr *MockProviderSessionClientMockRecorder) UpdateProviderSession(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProviderSession", reflect.TypeOf((*MockProviderSessionClient)(nil).UpdateProviderSession), ctx, id, update)
}

// MockDataSourceClient is a mock of DataSourceClient interface.
type MockDataSourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceClientMockRecorder
	isgomock struct{}
}

// MockDataSourceClientMockRecorder is the mock recorder for MockDataSourceClient.
type MockDataSourceClientMockRecorder struct {
	mock *MockDataSourceClient
}

// NewMockDataSourceClient creates a new mock instance.
func NewMockDataSourceClient(ctrl *gomock.Controller) *MockDataSourceClient {
	mock := &MockDataSourceClient{ctrl: ctrl}
	mock.recorder = &MockDataSourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSourceClient) EXPECT() *MockDataSourceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataSourceClient) Create(ctx context.Context, userID string, create *source.Create) (*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, create)
	ret0, _ := ret[0].(*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDataSourceClientMockRecorder) Create(ctx, userID, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataSourceClient)(nil).Create), ctx, userID, create)
}

// List mocks base method.
func (m *MockDataSourceClient) List(ctx context.Context, userID string, filter *source.Filter, pagination *page.Pagination) (source.SourceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID, filter, pagination)
	ret0, _ := ret[0].(source.SourceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDataSourceClientMockRecorder) List(ctx, userID, filter, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDataSourceClient)(nil).List), ctx, userID, filter, pagination)
}

// Update mocks base method.
func (m *MockDataSourceClient) Update(ctx context.Context, id string, condition *request.Condition, update *source.Update) (*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, condition, update)
	ret0, _ := ret[0].(*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDataSourceClientMockRecorder) Update(ctx, id, condition, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataSourceClient)(nil).Update), ctx, id, condition, update)
}

// MockDataSetClient is a mock of DataSetClient interface.
type MockDataSetClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataSetClientMockRecorder
	isgomock struct{}
}

// MockDataSetClientMockRecorder is the mock recorder for MockDataSetClient.
type MockDataSetClientMockRecorder struct {
	mock *MockDataSetClient
}

// NewMockDataSetClient creates a new mock instance.
func NewMockDataSetClient(ctrl *gomock.Controller) *MockDataSetClient {
	mock := &MockDataSetClient{ctrl: ctrl}
	mock.recorder = &MockDataSetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSetClient) EXPECT() *MockDataSetClientMockRecorder {
	return m.recorder
}

// CreateUserDataSet mocks base method.
func (m *MockDataSetClient) CreateUserDataSet(ctx context.Context, userID string, create *data.DataSetCreate) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDataSet", ctx, userID, create)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDataSet indicates an expected call of CreateUserDataSet.
func (mr *MockDataSetClientMockRecorder) CreateUserDataSet(ctx, userID, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDataSet", reflect.TypeOf((*MockDataSetClient)(nil).CreateUserDataSet), ctx, userID, create)
}

// GetDataSet mocks base method.
func (m *MockDataSetClient) GetDataSet(ctx context.Context, id string) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSet", ctx, id)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSet indicates an expected call of GetDataSet.
func (mr *MockDataSetClientMockRecorder) GetDataSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSet", reflect.TypeOf((*MockDataSetClient)(nil).GetDataSet), ctx, id)
}
