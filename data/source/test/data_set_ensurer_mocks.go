// Code generated by MockGen. DO NOT EDIT.
// Source: data_set_ensurer.go
//
// Generated by this command:
//
//	mockgen -source=data_set_ensurer.go -destination=test/data_set_ensurer_mocks.go -package=test DataSetEnsurerFactory
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	data "github.com/tidepool-org/platform/data"
	source "github.com/tidepool-org/platform/data/source"
)

// MockDataSetEnsurerClient is a mock of DataSetEnsurerClient interface.
type MockDataSetEnsurerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataSetEnsurerClientMockRecorder
	isgomock struct{}
}

// MockDataSetEnsurerClientMockRecorder is the mock recorder for MockDataSetEnsurerClient.
type MockDataSetEnsurerClientMockRecorder struct {
	mock *MockDataSetEnsurerClient
}

// NewMockDataSetEnsurerClient creates a new mock instance.
func NewMockDataSetEnsurerClient(ctrl *gomock.Controller) *MockDataSetEnsurerClient {
	mock := &MockDataSetEnsurerClient{ctrl: ctrl}
	mock.recorder = &MockDataSetEnsurerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSetEnsurerClient) EXPECT() *MockDataSetEnsurerClientMockRecorder {
	return m.recorder
}

// CreateUserDataSet mocks base method.
func (m *MockDataSetEnsurerClient) CreateUserDataSet(ctx context.Context, userID string, create *data.DataSetCreate) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDataSet", ctx, userID, create)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDataSet indicates an expected call of CreateUserDataSet.
func (mr *MockDataSetEnsurerClientMockRecorder) CreateUserDataSet(ctx, userID, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDataSet", reflect.TypeOf((*MockDataSetEnsurerClient)(nil).CreateUserDataSet), ctx, userID, create)
}

// GetDataSet mocks base method.
func (m *MockDataSetEnsurerClient) GetDataSet(ctx context.Context, id string) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSet", ctx, id)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSet indicates an expected call of GetDataSet.
func (mr *MockDataSetEnsurerClientMockRecorder) GetDataSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSet", reflect.TypeOf((*MockDataSetEnsurerClient)(nil).GetDataSet), ctx, id)
}

// MockDataSetEnsurerFactory is a mock of DataSetEnsurerFactory interface.
type MockDataSetEnsurerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDataSetEnsurerFactoryMockRecorder
	isgomock struct{}
}

// MockDataSetEnsurerFactoryMockRecorder is the mock recorder for MockDataSetEnsurerFactory.
type MockDataSetEnsurerFactoryMockRecorder struct {
	mock *MockDataSetEnsurerFactory
}

// NewMockDataSetEnsurerFactory creates a new mock instance.
func NewMockDataSetEnsurerFactory(ctrl *gomock.Controller) *MockDataSetEnsurerFactory {
	mock := &MockDataSetEnsurerFactory{ctrl: ctrl}
	mock.recorder = &MockDataSetEnsurerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSetEnsurerFactory) EXPECT() *MockDataSetEnsurerFactoryMockRecorder {
	return m.recorder
}

// NewDataSetCreate mocks base method.
func (m *MockDataSetEnsurerFactory) NewDataSetCreate(dataSrc source.Source) data.DataSetCreate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDataSetCreate", dataSrc)
	ret0, _ := ret[0].(data.DataSetCreate)
	return ret0
}

// NewDataSetCreate indicates an expected call of NewDataSetCreate.
func (mr *MockDataSetEnsurerFactoryMockRecorder) NewDataSetCreate(dataSrc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDataSetCreate", reflect.TypeOf((*MockDataSetEnsurerFactory)(nil).NewDataSetCreate), dataSrc)
}
