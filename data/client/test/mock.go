// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/data/client (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./test/mock.go -package test . Client
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	data "github.com/tidepool-org/platform/data"
	types "github.com/tidepool-org/platform/data/summary/types"
	page "github.com/tidepool-org/platform/page"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BackfillSummaries mocks base method.
func (m *MockClient) BackfillSummaries(ctx context.Context, t string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackfillSummaries", ctx, t)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackfillSummaries indicates an expected call of BackfillSummaries.
func (mr *MockClientMockRecorder) BackfillSummaries(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackfillSummaries", reflect.TypeOf((*MockClient)(nil).BackfillSummaries), ctx, t)
}

// CreateDataSetsData mocks base method.
func (m *MockClient) CreateDataSetsData(ctx context.Context, dataSetID string, datumArray []data.Datum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSetsData", ctx, dataSetID, datumArray)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataSetsData indicates an expected call of CreateDataSetsData.
func (mr *MockClientMockRecorder) CreateDataSetsData(ctx, dataSetID, datumArray any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetsData", reflect.TypeOf((*MockClient)(nil).CreateDataSetsData), ctx, dataSetID, datumArray)
}

// CreateUserDataSet mocks base method.
func (m *MockClient) CreateUserDataSet(ctx context.Context, userID string, create *data.DataSetCreate) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDataSet", ctx, userID, create)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDataSet indicates an expected call of CreateUserDataSet.
func (mr *MockClientMockRecorder) CreateUserDataSet(ctx, userID, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDataSet", reflect.TypeOf((*MockClient)(nil).CreateUserDataSet), ctx, userID, create)
}

// DeleteDataSet mocks base method.
func (m *MockClient) DeleteDataSet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataSet indicates an expected call of DeleteDataSet.
func (mr *MockClientMockRecorder) DeleteDataSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSet", reflect.TypeOf((*MockClient)(nil).DeleteDataSet), ctx, id)
}

// DestroyDataForUserByID mocks base method.
func (m *MockClient) DestroyDataForUserByID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyDataForUserByID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyDataForUserByID indicates an expected call of DestroyDataForUserByID.
func (mr *MockClientMockRecorder) DestroyDataForUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDataForUserByID", reflect.TypeOf((*MockClient)(nil).DestroyDataForUserByID), ctx, userID)
}

// GetBGMSummary mocks base method.
func (m *MockClient) GetBGMSummary(ctx context.Context, id string) (*types.Summary[*types.BGMStats, types.BGMStats], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBGMSummary", ctx, id)
	ret0, _ := ret[0].(*types.Summary[*types.BGMStats, types.BGMStats])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBGMSummary indicates an expected call of GetBGMSummary.
func (mr *MockClientMockRecorder) GetBGMSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBGMSummary", reflect.TypeOf((*MockClient)(nil).GetBGMSummary), ctx, id)
}

// GetCGMSummary mocks base method.
func (m *MockClient) GetCGMSummary(ctx context.Context, id string) (*types.Summary[*types.CGMStats, types.CGMStats], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCGMSummary", ctx, id)
	ret0, _ := ret[0].(*types.Summary[*types.CGMStats, types.CGMStats])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCGMSummary indicates an expected call of GetCGMSummary.
func (mr *MockClientMockRecorder) GetCGMSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCGMSummary", reflect.TypeOf((*MockClient)(nil).GetCGMSummary), ctx, id)
}

// GetContinuousSummary mocks base method.
func (m *MockClient) GetContinuousSummary(ctx context.Context, id string) (*types.Summary[*types.ContinuousStats, types.ContinuousStats], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContinuousSummary", ctx, id)
	ret0, _ := ret[0].(*types.Summary[*types.ContinuousStats, types.ContinuousStats])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContinuousSummary indicates an expected call of GetContinuousSummary.
func (mr *MockClientMockRecorder) GetContinuousSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinuousSummary", reflect.TypeOf((*MockClient)(nil).GetContinuousSummary), ctx, id)
}

// GetDataSet mocks base method.
func (m *MockClient) GetDataSet(ctx context.Context, id string) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSet", ctx, id)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSet indicates an expected call of GetDataSet.
func (mr *MockClientMockRecorder) GetDataSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSet", reflect.TypeOf((*MockClient)(nil).GetDataSet), ctx, id)
}

// GetMigratableUserIDs mocks base method.
func (m *MockClient) GetMigratableUserIDs(ctx context.Context, t string, pagination *page.Pagination) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigratableUserIDs", ctx, t, pagination)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigratableUserIDs indicates an expected call of GetMigratableUserIDs.
func (mr *MockClientMockRecorder) GetMigratableUserIDs(ctx, t, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigratableUserIDs", reflect.TypeOf((*MockClient)(nil).GetMigratableUserIDs), ctx, t, pagination)
}

// GetOutdatedUserIDs mocks base method.
func (m *MockClient) GetOutdatedUserIDs(ctx context.Context, t string, pagination *page.Pagination) (*types.OutdatedSummariesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutdatedUserIDs", ctx, t, pagination)
	ret0, _ := ret[0].(*types.OutdatedSummariesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutdatedUserIDs indicates an expected call of GetOutdatedUserIDs.
func (mr *MockClientMockRecorder) GetOutdatedUserIDs(ctx, t, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutdatedUserIDs", reflect.TypeOf((*MockClient)(nil).GetOutdatedUserIDs), ctx, t, pagination)
}

// ListUserDataSets mocks base method.
func (m *MockClient) ListUserDataSets(ctx context.Context, userID string, filter *data.DataSetFilter, pagination *page.Pagination) (data.DataSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserDataSets", ctx, userID, filter, pagination)
	ret0, _ := ret[0].(data.DataSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserDataSets indicates an expected call of ListUserDataSets.
func (mr *MockClientMockRecorder) ListUserDataSets(ctx, userID, filter, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserDataSets", reflect.TypeOf((*MockClient)(nil).ListUserDataSets), ctx, userID, filter, pagination)
}

// UpdateBGMSummary mocks base method.
func (m *MockClient) UpdateBGMSummary(ctx context.Context, id string) (*types.Summary[*types.BGMStats, types.BGMStats], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBGMSummary", ctx, id)
	ret0, _ := ret[0].(*types.Summary[*types.BGMStats, types.BGMStats])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBGMSummary indicates an expected call of UpdateBGMSummary.
func (mr *MockClientMockRecorder) UpdateBGMSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBGMSummary", reflect.TypeOf((*MockClient)(nil).UpdateBGMSummary), ctx, id)
}

// UpdateCGMSummary mocks base method.
func (m *MockClient) UpdateCGMSummary(ctx context.Context, id string) (*types.Summary[*types.CGMStats, types.CGMStats], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCGMSummary", ctx, id)
	ret0, _ := ret[0].(*types.Summary[*types.CGMStats, types.CGMStats])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCGMSummary indicates an expected call of UpdateCGMSummary.
func (mr *MockClientMockRecorder) UpdateCGMSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCGMSummary", reflect.TypeOf((*MockClient)(nil).UpdateCGMSummary), ctx, id)
}

// UpdateContinuousSummary mocks base method.
func (m *MockClient) UpdateContinuousSummary(ctx context.Context, id string) (*types.Summary[*types.ContinuousStats, types.ContinuousStats], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContinuousSummary", ctx, id)
	ret0, _ := ret[0].(*types.Summary[*types.ContinuousStats, types.ContinuousStats])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContinuousSummary indicates an expected call of UpdateContinuousSummary.
func (mr *MockClientMockRecorder) UpdateContinuousSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContinuousSummary", reflect.TypeOf((*MockClient)(nil).UpdateContinuousSummary), ctx, id)
}

// UpdateDataSet mocks base method.
func (m *MockClient) UpdateDataSet(ctx context.Context, id string, update *data.DataSetUpdate) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSet", ctx, id, update)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSet indicates an expected call of UpdateDataSet.
func (mr *MockClientMockRecorder) UpdateDataSet(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSet", reflect.TypeOf((*MockClient)(nil).UpdateDataSet), ctx, id, update)
}
