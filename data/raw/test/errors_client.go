// Code generated by MockGen. DO NOT EDIT.
// Source: ./errors_client.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	raw "github.com/tidepool-org/platform/data/raw"
	page "github.com/tidepool-org/platform/page"
)

// MockErrorsClient is a mock of ErrorsClient interface.
type MockErrorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockErrorsClientMockRecorder
}

// MockErrorsClientMockRecorder is the mock recorder for MockErrorsClient.
type MockErrorsClientMockRecorder struct {
	mock *MockErrorsClient
}

// NewMockErrorsClient creates a new mock instance.
func NewMockErrorsClient(ctrl *gomock.Controller) *MockErrorsClient {
	mock := &MockErrorsClient{ctrl: ctrl}
	mock.recorder = &MockErrorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorsClient) EXPECT() *MockErrorsClientMockRecorder {
	return m.recorder
}

// AppendErrors mocks base method.
func (m *MockErrorsClient) AppendErrors(ctx context.Context, userID, dataSetID string, sourceErrors raw.SourceErrors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendErrors", ctx, userID, dataSetID, sourceErrors)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendErrors indicates an expected call of AppendErrors.
func (mr *MockErrorsClientMockRecorder) AppendErrors(ctx, userID, dataSetID, sourceErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendErrors", reflect.TypeOf((*MockErrorsClient)(nil).AppendErrors), ctx, userID, dataSetID, sourceErrors)
}

// DeleteAll mocks base method.
func (m *MockErrorsClient) DeleteAll(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockErrorsClientMockRecorder) DeleteAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockErrorsClient)(nil).DeleteAll), ctx, userID)
}

// ListErrors mocks base method.
func (m *MockErrorsClient) ListErrors(ctx context.Context, userID, dataSetID string, filter *raw.ErrorsFilter, pagination *page.Pagination) (raw.DataSetErrorsArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListErrors", ctx, userID, dataSetID, filter, pagination)
	ret0, _ := ret[0].(raw.DataSetErrorsArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListErrors indicates an expected call of ListErrors.
func (mr *MockErrorsClientMockRecorder) ListErrors(ctx, userID, dataSetID, filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListErrors", reflect.TypeOf((*MockErrorsClient)(nil).ListErrors), ctx, userID, dataSetID, filter, pagination)
}
