// Code generated by MockGen. DO NOT EDIT.
// Source: ./errors_client.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	raw "github.com/tidepool-org/platform/data/raw"
)

// MockErrorsClient is a mock of ErrorsClient interface.
type MockErrorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockErrorsClientMockRecorder
}

// MockErrorsClientMockRecorder is the mock recorder for MockErrorsClient.
type MockErrorsClientMockRecorder struct {
	mock *MockErrorsClient
}

// NewMockErrorsClient creates a new mock instance.
func NewMockErrorsClient(ctrl *gomock.Controller) *MockErrorsClient {
	mock := &MockErrorsClient{ctrl: ctrl}
	mock.recorder = &MockErrorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorsClient) EXPECT() *MockErrorsClientMockRecorder {
	return m.recorder
}

// AppendErrors mocks base method.
func (m *MockErrorsClient) AppendErrors(ctx context.Context, userID, dataSetID string, sourceErrors raw.SourceErrors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendErrors", ctx, userID, dataSetID, sourceErrors)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendErrors indicates an expected call of AppendErrors.
func (mr *MockErrorsClientMockRecorder) AppendErrors(ctx, userID, dataSetID, sourceErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendErrors", reflect.TypeOf((*MockErrorsClient)(nil).AppendErrors), ctx, userID, dataSetID, sourceErrors)
}
