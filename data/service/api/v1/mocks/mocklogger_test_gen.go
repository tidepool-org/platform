// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/log (interfaces: Logger)
//
// Generated by this command:
//
//	mockgen -destination mocks/mocklogger_test_gen.go -package mocks github.com/tidepool-org/platform/log Logger
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	log "github.com/tidepool-org/platform/log"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), message)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(message string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(message any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", message)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), message)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(message string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(message any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", message)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), message)
}

// Infof mocks base method.
func (m *MockLogger) Infof(message string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(message any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Level mocks base method.
func (m *MockLogger) Level() log.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(log.Level)
	return ret0
}

// Level indicates an expected call of Level.
func (mr *MockLoggerMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockLogger)(nil).Level))
}

// Log mocks base method.
func (m *MockLogger) Log(level log.Level, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", level, message)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(level, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), level, message)
}

// Warn mocks base method.
func (m *MockLogger) Warn(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", message)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), message)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(message string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(message any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// WithError mocks base method.
func (m *MockLogger) WithError(err error) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", err)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockLoggerMockRecorder) WithError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockLogger)(nil).WithError), err)
}

// WithField mocks base method.
func (m *MockLogger) WithField(key string, value any) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithField indicates an expected call of WithField.
func (mr *MockLoggerMockRecorder) WithField(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*MockLogger)(nil).WithField), key, value)
}

// WithFields mocks base method.
func (m *MockLogger) WithFields(fields log.Fields) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockLoggerMockRecorder) WithFields(fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), fields)
}

// WithLevel mocks base method.
func (m *MockLogger) WithLevel(level log.Level) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLevel", level)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithLevel indicates an expected call of WithLevel.
func (mr *MockLoggerMockRecorder) WithLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLevel", reflect.TypeOf((*MockLogger)(nil).WithLevel), level)
}

// WithLevelRank mocks base method.
func (m *MockLogger) WithLevelRank(level log.Level, rank log.Rank) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLevelRank", level, rank)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithLevelRank indicates an expected call of WithLevelRank.
func (mr *MockLoggerMockRecorder) WithLevelRank(level, rank any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLevelRank", reflect.TypeOf((*MockLogger)(nil).WithLevelRank), level, rank)
}

// WithLevelRanks mocks base method.
func (m *MockLogger) WithLevelRanks(levelRanks log.LevelRanks) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLevelRanks", levelRanks)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithLevelRanks indicates an expected call of WithLevelRanks.
func (mr *MockLoggerMockRecorder) WithLevelRanks(levelRanks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLevelRanks", reflect.TypeOf((*MockLogger)(nil).WithLevelRanks), levelRanks)
}
