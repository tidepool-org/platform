// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/dexcom/fetch (interfaces: AuthClient,DataClient,DataSourceClient,DexcomClient,Provider)

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	auth "github.com/tidepool-org/platform/auth"
	data "github.com/tidepool-org/platform/data"
	source "github.com/tidepool-org/platform/data/source"
	dexcom "github.com/tidepool-org/platform/dexcom"
	fetch "github.com/tidepool-org/platform/dexcom/fetch"
	oauth "github.com/tidepool-org/platform/oauth"
	request "github.com/tidepool-org/platform/request"
)

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// GetProviderSession mocks base method.
func (m *MockAuthClient) GetProviderSession(arg0 context.Context, arg1 string) (*auth.ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderSession", arg0, arg1)
	ret0, _ := ret[0].(*auth.ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderSession indicates an expected call of GetProviderSession.
func (mr *MockAuthClientMockRecorder) GetProviderSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderSession", reflect.TypeOf((*MockAuthClient)(nil).GetProviderSession), arg0, arg1)
}

// ServerSessionToken mocks base method.
func (m *MockAuthClient) ServerSessionToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerSessionToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerSessionToken indicates an expected call of ServerSessionToken.
func (mr *MockAuthClientMockRecorder) ServerSessionToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerSessionToken", reflect.TypeOf((*MockAuthClient)(nil).ServerSessionToken))
}

// UpdateProviderSession mocks base method.
func (m *MockAuthClient) UpdateProviderSession(arg0 context.Context, arg1 string, arg2 *auth.ProviderSessionUpdate) (*auth.ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProviderSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(*auth.ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProviderSession indicates an expected call of UpdateProviderSession.
func (mr *MockAuthClientMockRecorder) UpdateProviderSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProviderSession", reflect.TypeOf((*MockAuthClient)(nil).UpdateProviderSession), arg0, arg1, arg2)
}

// MockDataClient is a mock of DataClient interface.
type MockDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataClientMockRecorder
}

// MockDataClientMockRecorder is the mock recorder for MockDataClient.
type MockDataClientMockRecorder struct {
	mock *MockDataClient
}

// NewMockDataClient creates a new mock instance.
func NewMockDataClient(ctrl *gomock.Controller) *MockDataClient {
	mock := &MockDataClient{ctrl: ctrl}
	mock.recorder = &MockDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataClient) EXPECT() *MockDataClientMockRecorder {
	return m.recorder
}

// CreateDataSetsData mocks base method.
func (m *MockDataClient) CreateDataSetsData(arg0 context.Context, arg1 string, arg2 []data.Datum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSetsData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataSetsData indicates an expected call of CreateDataSetsData.
func (mr *MockDataClientMockRecorder) CreateDataSetsData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetsData", reflect.TypeOf((*MockDataClient)(nil).CreateDataSetsData), arg0, arg1, arg2)
}

// CreateUserDataSet mocks base method.
func (m *MockDataClient) CreateUserDataSet(arg0 context.Context, arg1 string, arg2 *data.DataSetCreate) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDataSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDataSet indicates an expected call of CreateUserDataSet.
func (mr *MockDataClientMockRecorder) CreateUserDataSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDataSet", reflect.TypeOf((*MockDataClient)(nil).CreateUserDataSet), arg0, arg1, arg2)
}

// GetDataSet mocks base method.
func (m *MockDataClient) GetDataSet(arg0 context.Context, arg1 string) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSet", arg0, arg1)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSet indicates an expected call of GetDataSet.
func (mr *MockDataClientMockRecorder) GetDataSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSet", reflect.TypeOf((*MockDataClient)(nil).GetDataSet), arg0, arg1)
}

// UpdateDataSet mocks base method.
func (m *MockDataClient) UpdateDataSet(arg0 context.Context, arg1 string, arg2 *data.DataSetUpdate) (*data.DataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*data.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSet indicates an expected call of UpdateDataSet.
func (mr *MockDataClientMockRecorder) UpdateDataSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSet", reflect.TypeOf((*MockDataClient)(nil).UpdateDataSet), arg0, arg1, arg2)
}

// MockDataSourceClient is a mock of DataSourceClient interface.
type MockDataSourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceClientMockRecorder
}

// MockDataSourceClientMockRecorder is the mock recorder for MockDataSourceClient.
type MockDataSourceClientMockRecorder struct {
	mock *MockDataSourceClient
}

// NewMockDataSourceClient creates a new mock instance.
func NewMockDataSourceClient(ctrl *gomock.Controller) *MockDataSourceClient {
	mock := &MockDataSourceClient{ctrl: ctrl}
	mock.recorder = &MockDataSourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSourceClient) EXPECT() *MockDataSourceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDataSourceClient) Get(arg0 context.Context, arg1 string) (*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataSourceClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataSourceClient)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockDataSourceClient) Update(arg0 context.Context, arg1 string, arg2 *request.Condition, arg3 *source.Update) (*source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDataSourceClientMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataSourceClient)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockDexcomClient is a mock of DexcomClient interface.
type MockDexcomClient struct {
	ctrl     *gomock.Controller
	recorder *MockDexcomClientMockRecorder
}

// MockDexcomClientMockRecorder is the mock recorder for MockDexcomClient.
type MockDexcomClientMockRecorder struct {
	mock *MockDexcomClient
}

// NewMockDexcomClient creates a new mock instance.
func NewMockDexcomClient(ctrl *gomock.Controller) *MockDexcomClient {
	mock := &MockDexcomClient{ctrl: ctrl}
	mock.recorder = &MockDexcomClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDexcomClient) EXPECT() *MockDexcomClientMockRecorder {
	return m.recorder
}

// GetAlerts mocks base method.
func (m *MockDexcomClient) GetAlerts(arg0 context.Context, arg1, arg2 time.Time, arg3 oauth.TokenSource) (*dexcom.AlertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlerts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dexcom.AlertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockDexcomClientMockRecorder) GetAlerts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockDexcomClient)(nil).GetAlerts), arg0, arg1, arg2, arg3)
}

// GetCalibrations mocks base method.
func (m *MockDexcomClient) GetCalibrations(arg0 context.Context, arg1, arg2 time.Time, arg3 oauth.TokenSource) (*dexcom.CalibrationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalibrations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dexcom.CalibrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalibrations indicates an expected call of GetCalibrations.
func (mr *MockDexcomClientMockRecorder) GetCalibrations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalibrations", reflect.TypeOf((*MockDexcomClient)(nil).GetCalibrations), arg0, arg1, arg2, arg3)
}

// GetDataRange mocks base method.
func (m *MockDexcomClient) GetDataRange(arg0 context.Context, arg1 *time.Time, arg2 oauth.TokenSource) (*dexcom.DataRangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dexcom.DataRangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataRange indicates an expected call of GetDataRange.
func (mr *MockDexcomClientMockRecorder) GetDataRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataRange", reflect.TypeOf((*MockDexcomClient)(nil).GetDataRange), arg0, arg1, arg2)
}

// GetDevices mocks base method.
func (m *MockDexcomClient) GetDevices(arg0 context.Context, arg1, arg2 time.Time, arg3 oauth.TokenSource) (*dexcom.DevicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dexcom.DevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockDexcomClientMockRecorder) GetDevices(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockDexcomClient)(nil).GetDevices), arg0, arg1, arg2, arg3)
}

// GetEGVs mocks base method.
func (m *MockDexcomClient) GetEGVs(arg0 context.Context, arg1, arg2 time.Time, arg3 oauth.TokenSource) (*dexcom.EGVsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEGVs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dexcom.EGVsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEGVs indicates an expected call of GetEGVs.
func (mr *MockDexcomClientMockRecorder) GetEGVs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEGVs", reflect.TypeOf((*MockDexcomClient)(nil).GetEGVs), arg0, arg1, arg2, arg3)
}

// GetEvents mocks base method.
func (m *MockDexcomClient) GetEvents(arg0 context.Context, arg1, arg2 time.Time, arg3 oauth.TokenSource) (*dexcom.EventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dexcom.EventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockDexcomClientMockRecorder) GetEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockDexcomClient)(nil).GetEvents), arg0, arg1, arg2, arg3)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AuthClient mocks base method.
func (m *MockProvider) AuthClient() fetch.AuthClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthClient")
	ret0, _ := ret[0].(fetch.AuthClient)
	return ret0
}

// AuthClient indicates an expected call of AuthClient.
func (mr *MockProviderMockRecorder) AuthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthClient", reflect.TypeOf((*MockProvider)(nil).AuthClient))
}

// DataClient mocks base method.
func (m *MockProvider) DataClient() fetch.DataClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataClient")
	ret0, _ := ret[0].(fetch.DataClient)
	return ret0
}

// DataClient indicates an expected call of DataClient.
func (mr *MockProviderMockRecorder) DataClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataClient", reflect.TypeOf((*MockProvider)(nil).DataClient))
}

// DataSourceClient mocks base method.
func (m *MockProvider) DataSourceClient() fetch.DataSourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSourceClient")
	ret0, _ := ret[0].(fetch.DataSourceClient)
	return ret0
}

// DataSourceClient indicates an expected call of DataSourceClient.
func (mr *MockProviderMockRecorder) DataSourceClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSourceClient", reflect.TypeOf((*MockProvider)(nil).DataSourceClient))
}

// DexcomClient mocks base method.
func (m *MockProvider) DexcomClient() fetch.DexcomClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DexcomClient")
	ret0, _ := ret[0].(fetch.DexcomClient)
	return ret0
}

// DexcomClient indicates an expected call of DexcomClient.
func (mr *MockProviderMockRecorder) DexcomClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DexcomClient", reflect.TypeOf((*MockProvider)(nil).DexcomClient))
}

// GetRunnerDurationMaximum mocks base method.
func (m *MockProvider) GetRunnerDurationMaximum() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnerDurationMaximum")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRunnerDurationMaximum indicates an expected call of GetRunnerDurationMaximum.
func (mr *MockProviderMockRecorder) GetRunnerDurationMaximum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnerDurationMaximum", reflect.TypeOf((*MockProvider)(nil).GetRunnerDurationMaximum))
}
