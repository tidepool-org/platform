// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=test/mailer_mocks.go -package=test Mailer
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	events "github.com/tidepool-org/go-common/events"
	gomock "go.uber.org/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
	isgomock struct{}
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendEmailTemplate mocks base method.
func (m *MockMailer) SendEmailTemplate(arg0 context.Context, arg1 events.SendEmailTemplateEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailTemplate indicates an expected call of SendEmailTemplate.
func (mr *MockMailerMockRecorder) SendEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailTemplate", reflect.TypeOf((*MockMailer)(nil).SendEmailTemplate), arg0, arg1)
}
