// Code generated by MockGen. DO NOT EDIT.
// Source: mailer.go
//
// Generated by this command:
//
//	mockgen -source=mailer.go -destination=test/mailer_mocks.go -package=test ConsentMailer
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	consent "github.com/tidepool-org/platform/consent"
)

// MockConsentMailer is a mock of ConsentMailer interface.
type MockConsentMailer struct {
	ctrl     *gomock.Controller
	recorder *MockConsentMailerMockRecorder
	isgomock struct{}
}

// MockConsentMailerMockRecorder is the mock recorder for MockConsentMailer.
type MockConsentMailerMockRecorder struct {
	mock *MockConsentMailer
}

// NewMockConsentMailer creates a new mock instance.
func NewMockConsentMailer(ctrl *gomock.Controller) *MockConsentMailer {
	mock := &MockConsentMailer{ctrl: ctrl}
	mock.recorder = &MockConsentMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsentMailer) EXPECT() *MockConsentMailerMockRecorder {
	return m.recorder
}

// SendConsentGrantedEmailNotification mocks base method.
func (m *MockConsentMailer) SendConsentGrantedEmailNotification(ctx context.Context, cons consent.Consent, record consent.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConsentGrantedEmailNotification", ctx, cons, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConsentGrantedEmailNotification indicates an expected call of SendConsentGrantedEmailNotification.
func (mr *MockConsentMailerMockRecorder) SendConsentGrantedEmailNotification(ctx, cons, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsentGrantedEmailNotification", reflect.TypeOf((*MockConsentMailer)(nil).SendConsentGrantedEmailNotification), ctx, cons, record)
}

// SendConsentRevokedEmailNotification mocks base method.
func (m *MockConsentMailer) SendConsentRevokedEmailNotification(ctx context.Context, cons consent.Consent, record consent.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConsentRevokedEmailNotification", ctx, cons, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConsentRevokedEmailNotification indicates an expected call of SendConsentRevokedEmailNotification.
func (mr *MockConsentMailerMockRecorder) SendConsentRevokedEmailNotification(ctx, cons, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsentRevokedEmailNotification", reflect.TypeOf((*MockConsentMailer)(nil).SendConsentRevokedEmailNotification), ctx, cons, record)
}
