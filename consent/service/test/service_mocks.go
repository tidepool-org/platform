// Code generated by MockGen. DO NOT EDIT.
// Source: consent.go
//
// Generated by this command:
//
//	mockgen -source=consent.go -destination=test/service_mocks.go -package=test Service
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	consent "github.com/tidepool-org/platform/consent"
	page "github.com/tidepool-org/platform/page"
	mongo "github.com/tidepool-org/platform/store/structured/mongo"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateConsentRecord mocks base method.
func (m *MockService) CreateConsentRecord(arg0 context.Context, arg1 string, arg2 *consent.RecordCreate) (*consent.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsentRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*consent.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsentRecord indicates an expected call of CreateConsentRecord.
func (mr *MockServiceMockRecorder) CreateConsentRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsentRecord", reflect.TypeOf((*MockService)(nil).CreateConsentRecord), arg0, arg1, arg2)
}

// EnsureConsent mocks base method.
func (m *MockService) EnsureConsent(arg0 context.Context, arg1 *consent.Consent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureConsent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureConsent indicates an expected call of EnsureConsent.
func (mr *MockServiceMockRecorder) EnsureConsent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureConsent", reflect.TypeOf((*MockService)(nil).EnsureConsent), arg0, arg1)
}

// GetConsentRecord mocks base method.
func (m *MockService) GetConsentRecord(arg0 context.Context, arg1, arg2 string) (*consent.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsentRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*consent.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsentRecord indicates an expected call of GetConsentRecord.
func (mr *MockServiceMockRecorder) GetConsentRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsentRecord", reflect.TypeOf((*MockService)(nil).GetConsentRecord), arg0, arg1, arg2)
}

// ListConsentRecords mocks base method.
func (m *MockService) ListConsentRecords(arg0 context.Context, arg1 string, arg2 *consent.RecordFilter, arg3 *page.Pagination) (*mongo.ListResult[consent.Record], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsentRecords", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*mongo.ListResult[consent.Record])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsentRecords indicates an expected call of ListConsentRecords.
func (mr *MockServiceMockRecorder) ListConsentRecords(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsentRecords", reflect.TypeOf((*MockService)(nil).ListConsentRecords), arg0, arg1, arg2, arg3)
}

// ListConsents mocks base method.
func (m *MockService) ListConsents(arg0 context.Context, arg1 *consent.Filter, arg2 *page.Pagination) (*mongo.ListResult[consent.Consent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsents", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongo.ListResult[consent.Consent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsents indicates an expected call of ListConsents.
func (mr *MockServiceMockRecorder) ListConsents(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsents", reflect.TypeOf((*MockService)(nil).ListConsents), arg0, arg1, arg2)
}

// RevokeConsentRecord mocks base method.
func (m *MockService) RevokeConsentRecord(arg0 context.Context, arg1 string, arg2 *consent.RecordRevoke) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeConsentRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeConsentRecord indicates an expected call of RevokeConsentRecord.
func (mr *MockServiceMockRecorder) RevokeConsentRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeConsentRecord", reflect.TypeOf((*MockService)(nil).RevokeConsentRecord), arg0, arg1, arg2)
}

// UpdateConsentRecord mocks base method.
func (m *MockService) UpdateConsentRecord(arg0 context.Context, arg1 *consent.Record) (*consent.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsentRecord", arg0, arg1)
	ret0, _ := ret[0].(*consent.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsentRecord indicates an expected call of UpdateConsentRecord.
func (mr *MockServiceMockRecorder) UpdateConsentRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsentRecord", reflect.TypeOf((*MockService)(nil).UpdateConsentRecord), arg0, arg1)
}

// MockConsentAccessor is a mock of ConsentAccessor interface.
type MockConsentAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockConsentAccessorMockRecorder
	isgomock struct{}
}

// MockConsentAccessorMockRecorder is the mock recorder for MockConsentAccessor.
type MockConsentAccessorMockRecorder struct {
	mock *MockConsentAccessor
}

// NewMockConsentAccessor creates a new mock instance.
func NewMockConsentAccessor(ctrl *gomock.Controller) *MockConsentAccessor {
	mock := &MockConsentAccessor{ctrl: ctrl}
	mock.recorder = &MockConsentAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsentAccessor) EXPECT() *MockConsentAccessorMockRecorder {
	return m.recorder
}

// EnsureConsent mocks base method.
func (m *MockConsentAccessor) EnsureConsent(arg0 context.Context, arg1 *consent.Consent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureConsent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureConsent indicates an expected call of EnsureConsent.
func (mr *MockConsentAccessorMockRecorder) EnsureConsent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureConsent", reflect.TypeOf((*MockConsentAccessor)(nil).EnsureConsent), arg0, arg1)
}

// ListConsents mocks base method.
func (m *MockConsentAccessor) ListConsents(arg0 context.Context, arg1 *consent.Filter, arg2 *page.Pagination) (*mongo.ListResult[consent.Consent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsents", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongo.ListResult[consent.Consent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsents indicates an expected call of ListConsents.
func (mr *MockConsentAccessorMockRecorder) ListConsents(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsents", reflect.TypeOf((*MockConsentAccessor)(nil).ListConsents), arg0, arg1, arg2)
}
