// Code generated by MockGen. DO NOT EDIT.
// Source: bddp.go
//
// Generated by this command:
//
//	mockgen -source=bddp.go -destination=test/bddp_mocks.go -package=test BigDataDonationProjectSharer
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBigDataDonationProjectSharer is a mock of BigDataDonationProjectSharer interface.
type MockBigDataDonationProjectSharer struct {
	ctrl     *gomock.Controller
	recorder *MockBigDataDonationProjectSharerMockRecorder
	isgomock struct{}
}

// MockBigDataDonationProjectSharerMockRecorder is the mock recorder for MockBigDataDonationProjectSharer.
type MockBigDataDonationProjectSharerMockRecorder struct {
	mock *MockBigDataDonationProjectSharer
}

// NewMockBigDataDonationProjectSharer creates a new mock instance.
func NewMockBigDataDonationProjectSharer(ctrl *gomock.Controller) *MockBigDataDonationProjectSharer {
	mock := &MockBigDataDonationProjectSharer{ctrl: ctrl}
	mock.recorder = &MockBigDataDonationProjectSharerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBigDataDonationProjectSharer) EXPECT() *MockBigDataDonationProjectSharerMockRecorder {
	return m.recorder
}

// Share mocks base method.
func (m *MockBigDataDonationProjectSharer) Share(ctx context.Context, sharerUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Share", ctx, sharerUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Share indicates an expected call of Share.
func (mr *MockBigDataDonationProjectSharerMockRecorder) Share(ctx, sharerUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockBigDataDonationProjectSharer)(nil).Share), ctx, sharerUserID)
}

// Unshare mocks base method.
func (m *MockBigDataDonationProjectSharer) Unshare(ctx context.Context, sharerUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unshare", ctx, sharerUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unshare indicates an expected call of Unshare.
func (mr *MockBigDataDonationProjectSharerMockRecorder) Unshare(ctx, sharerUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unshare", reflect.TypeOf((*MockBigDataDonationProjectSharer)(nil).Unshare), ctx, sharerUserID)
}
