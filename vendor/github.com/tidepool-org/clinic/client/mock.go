// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AddServiceAccount mocks base method.
func (m *MockClientInterface) AddServiceAccount(ctx context.Context, clinicId ClinicId, body AddServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddServiceAccount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceAccount indicates an expected call of AddServiceAccount.
func (mr *MockClientInterfaceMockRecorder) AddServiceAccount(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAccount", reflect.TypeOf((*MockClientInterface)(nil).AddServiceAccount), varargs...)
}

// AddServiceAccountWithBody mocks base method.
func (m *MockClientInterface) AddServiceAccountWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddServiceAccountWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceAccountWithBody indicates an expected call of AddServiceAccountWithBody.
func (mr *MockClientInterfaceMockRecorder) AddServiceAccountWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAccountWithBody", reflect.TypeOf((*MockClientInterface)(nil).AddServiceAccountWithBody), varargs...)
}

// AssignPatientTagToClinicPatients mocks base method.
func (m *MockClientInterface) AssignPatientTagToClinicPatients(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, body AssignPatientTagToClinicPatientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignPatientTagToClinicPatients", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPatientTagToClinicPatients indicates an expected call of AssignPatientTagToClinicPatients.
func (mr *MockClientInterfaceMockRecorder) AssignPatientTagToClinicPatients(ctx, clinicId, patientTagId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPatientTagToClinicPatients", reflect.TypeOf((*MockClientInterface)(nil).AssignPatientTagToClinicPatients), varargs...)
}

// AssignPatientTagToClinicPatientsWithBody mocks base method.
func (m *MockClientInterface) AssignPatientTagToClinicPatientsWithBody(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignPatientTagToClinicPatientsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPatientTagToClinicPatientsWithBody indicates an expected call of AssignPatientTagToClinicPatientsWithBody.
func (mr *MockClientInterfaceMockRecorder) AssignPatientTagToClinicPatientsWithBody(ctx, clinicId, patientTagId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPatientTagToClinicPatientsWithBody", reflect.TypeOf((*MockClientInterface)(nil).AssignPatientTagToClinicPatientsWithBody), varargs...)
}

// AssociateClinicianToUser mocks base method.
func (m *MockClientInterface) AssociateClinicianToUser(ctx context.Context, clinicId ClinicId, inviteId InviteId, body AssociateClinicianToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateClinicianToUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUser indicates an expected call of AssociateClinicianToUser.
func (mr *MockClientInterfaceMockRecorder) AssociateClinicianToUser(ctx, clinicId, inviteId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUser", reflect.TypeOf((*MockClientInterface)(nil).AssociateClinicianToUser), varargs...)
}

// AssociateClinicianToUserWithBody mocks base method.
func (m *MockClientInterface) AssociateClinicianToUserWithBody(ctx context.Context, clinicId ClinicId, inviteId InviteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateClinicianToUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUserWithBody indicates an expected call of AssociateClinicianToUserWithBody.
func (mr *MockClientInterfaceMockRecorder) AssociateClinicianToUserWithBody(ctx, clinicId, inviteId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).AssociateClinicianToUserWithBody), varargs...)
}

// CreateClinic mocks base method.
func (m *MockClientInterface) CreateClinic(ctx context.Context, body CreateClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinic indicates an expected call of CreateClinic.
func (mr *MockClientInterfaceMockRecorder) CreateClinic(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinic", reflect.TypeOf((*MockClientInterface)(nil).CreateClinic), varargs...)
}

// CreateClinicWithBody mocks base method.
func (m *MockClientInterface) CreateClinicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicWithBody indicates an expected call of CreateClinicWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateClinicWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateClinicWithBody), varargs...)
}

// CreateClinician mocks base method.
func (m *MockClientInterface) CreateClinician(ctx context.Context, clinicId ClinicId, body CreateClinicianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinician indicates an expected call of CreateClinician.
func (mr *MockClientInterfaceMockRecorder) CreateClinician(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinician", reflect.TypeOf((*MockClientInterface)(nil).CreateClinician), varargs...)
}

// CreateClinicianWithBody mocks base method.
func (m *MockClientInterface) CreateClinicianWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicianWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicianWithBody indicates an expected call of CreateClinicianWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateClinicianWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicianWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateClinicianWithBody), varargs...)
}

// CreatePatientAccount mocks base method.
func (m *MockClientInterface) CreatePatientAccount(ctx context.Context, clinicId ClinicId, body CreatePatientAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientAccount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccount indicates an expected call of CreatePatientAccount.
func (mr *MockClientInterfaceMockRecorder) CreatePatientAccount(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccount", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientAccount), varargs...)
}

// CreatePatientAccountWithBody mocks base method.
func (m *MockClientInterface) CreatePatientAccountWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientAccountWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccountWithBody indicates an expected call of CreatePatientAccountWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePatientAccountWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccountWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientAccountWithBody), varargs...)
}

// CreatePatientFromUser mocks base method.
func (m *MockClientInterface) CreatePatientFromUser(ctx context.Context, clinicId ClinicId, patientId PatientId, body CreatePatientFromUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientFromUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUser indicates an expected call of CreatePatientFromUser.
func (mr *MockClientInterfaceMockRecorder) CreatePatientFromUser(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUser", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientFromUser), varargs...)
}

// CreatePatientFromUserWithBody mocks base method.
func (m *MockClientInterface) CreatePatientFromUserWithBody(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientFromUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUserWithBody indicates an expected call of CreatePatientFromUserWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePatientFromUserWithBody(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientFromUserWithBody), varargs...)
}

// CreatePatientTag mocks base method.
func (m *MockClientInterface) CreatePatientTag(ctx context.Context, clinicId ClinicId, body CreatePatientTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientTag", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientTag indicates an expected call of CreatePatientTag.
func (mr *MockClientInterfaceMockRecorder) CreatePatientTag(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientTag", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientTag), varargs...)
}

// CreatePatientTagWithBody mocks base method.
func (m *MockClientInterface) CreatePatientTagWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientTagWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientTagWithBody indicates an expected call of CreatePatientTagWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePatientTagWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientTagWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientTagWithBody), varargs...)
}

// DeleteClinic mocks base method.
func (m *MockClientInterface) DeleteClinic(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClinic indicates an expected call of DeleteClinic.
func (mr *MockClientInterfaceMockRecorder) DeleteClinic(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinic", reflect.TypeOf((*MockClientInterface)(nil).DeleteClinic), varargs...)
}

// DeleteClinician mocks base method.
func (m *MockClientInterface) DeleteClinician(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClinician indicates an expected call of DeleteClinician.
func (mr *MockClientInterfaceMockRecorder) DeleteClinician(ctx, clinicId, clinicianId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinician", reflect.TypeOf((*MockClientInterface)(nil).DeleteClinician), varargs...)
}

// DeleteInvitedClinician mocks base method.
func (m *MockClientInterface) DeleteInvitedClinician(ctx context.Context, clinicId ClinicId, inviteId InviteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInvitedClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitedClinician indicates an expected call of DeleteInvitedClinician.
func (mr *MockClientInterfaceMockRecorder) DeleteInvitedClinician(ctx, clinicId, inviteId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitedClinician", reflect.TypeOf((*MockClientInterface)(nil).DeleteInvitedClinician), varargs...)
}

// DeletePatient mocks base method.
func (m *MockClientInterface) DeletePatient(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatient indicates an expected call of DeletePatient.
func (mr *MockClientInterfaceMockRecorder) DeletePatient(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatient", reflect.TypeOf((*MockClientInterface)(nil).DeletePatient), varargs...)
}

// DeletePatientPermission mocks base method.
func (m *MockClientInterface) DeletePatientPermission(ctx context.Context, clinicId ClinicId, patientId PatientId, permission string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, permission}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientPermission", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientPermission indicates an expected call of DeletePatientPermission.
func (mr *MockClientInterfaceMockRecorder) DeletePatientPermission(ctx, clinicId, patientId, permission interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, permission}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientPermission", reflect.TypeOf((*MockClientInterface)(nil).DeletePatientPermission), varargs...)
}

// DeletePatientReviews mocks base method.
func (m *MockClientInterface) DeletePatientReviews(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientReviews", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientReviews indicates an expected call of DeletePatientReviews.
func (mr *MockClientInterfaceMockRecorder) DeletePatientReviews(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientReviews", reflect.TypeOf((*MockClientInterface)(nil).DeletePatientReviews), varargs...)
}

// DeletePatientTag mocks base method.
func (m *MockClientInterface) DeletePatientTag(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientTag", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientTag indicates an expected call of DeletePatientTag.
func (mr *MockClientInterfaceMockRecorder) DeletePatientTag(ctx, clinicId, patientTagId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTag", reflect.TypeOf((*MockClientInterface)(nil).DeletePatientTag), varargs...)
}

// DeletePatientTagFromClinicPatients mocks base method.
func (m *MockClientInterface) DeletePatientTagFromClinicPatients(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, body DeletePatientTagFromClinicPatientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientTagFromClinicPatients", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientTagFromClinicPatients indicates an expected call of DeletePatientTagFromClinicPatients.
func (mr *MockClientInterfaceMockRecorder) DeletePatientTagFromClinicPatients(ctx, clinicId, patientTagId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTagFromClinicPatients", reflect.TypeOf((*MockClientInterface)(nil).DeletePatientTagFromClinicPatients), varargs...)
}

// DeletePatientTagFromClinicPatientsWithBody mocks base method.
func (m *MockClientInterface) DeletePatientTagFromClinicPatientsWithBody(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientTagFromClinicPatientsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientTagFromClinicPatientsWithBody indicates an expected call of DeletePatientTagFromClinicPatientsWithBody.
func (mr *MockClientInterfaceMockRecorder) DeletePatientTagFromClinicPatientsWithBody(ctx, clinicId, patientTagId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTagFromClinicPatientsWithBody", reflect.TypeOf((*MockClientInterface)(nil).DeletePatientTagFromClinicPatientsWithBody), varargs...)
}

// DeleteUserFromClinics mocks base method.
func (m *MockClientInterface) DeleteUserFromClinics(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserFromClinics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFromClinics indicates an expected call of DeleteUserFromClinics.
func (mr *MockClientInterfaceMockRecorder) DeleteUserFromClinics(ctx, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromClinics", reflect.TypeOf((*MockClientInterface)(nil).DeleteUserFromClinics), varargs...)
}

// EnableNewClinicExperience mocks base method.
func (m *MockClientInterface) EnableNewClinicExperience(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableNewClinicExperience", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableNewClinicExperience indicates an expected call of EnableNewClinicExperience.
func (mr *MockClientInterfaceMockRecorder) EnableNewClinicExperience(ctx, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableNewClinicExperience", reflect.TypeOf((*MockClientInterface)(nil).EnableNewClinicExperience), varargs...)
}

// FindPatients mocks base method.
func (m *MockClientInterface) FindPatients(ctx context.Context, params *FindPatientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPatients", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPatients indicates an expected call of FindPatients.
func (mr *MockClientInterfaceMockRecorder) FindPatients(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPatients", reflect.TypeOf((*MockClientInterface)(nil).FindPatients), varargs...)
}

// GenerateMergeReport mocks base method.
func (m *MockClientInterface) GenerateMergeReport(ctx context.Context, clinicId ClinicId, body GenerateMergeReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateMergeReport", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMergeReport indicates an expected call of GenerateMergeReport.
func (mr *MockClientInterfaceMockRecorder) GenerateMergeReport(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMergeReport", reflect.TypeOf((*MockClientInterface)(nil).GenerateMergeReport), varargs...)
}

// GenerateMergeReportWithBody mocks base method.
func (m *MockClientInterface) GenerateMergeReportWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateMergeReportWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMergeReportWithBody indicates an expected call of GenerateMergeReportWithBody.
func (mr *MockClientInterfaceMockRecorder) GenerateMergeReportWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMergeReportWithBody", reflect.TypeOf((*MockClientInterface)(nil).GenerateMergeReportWithBody), varargs...)
}

// GetClinic mocks base method.
func (m *MockClientInterface) GetClinic(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinic indicates an expected call of GetClinic.
func (mr *MockClientInterfaceMockRecorder) GetClinic(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinic", reflect.TypeOf((*MockClientInterface)(nil).GetClinic), varargs...)
}

// GetClinicByShareCode mocks base method.
func (m *MockClientInterface) GetClinicByShareCode(ctx context.Context, shareCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, shareCode}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinicByShareCode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicByShareCode indicates an expected call of GetClinicByShareCode.
func (mr *MockClientInterfaceMockRecorder) GetClinicByShareCode(ctx, shareCode interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, shareCode}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicByShareCode", reflect.TypeOf((*MockClientInterface)(nil).GetClinicByShareCode), varargs...)
}

// GetClinician mocks base method.
func (m *MockClientInterface) GetClinician(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinician indicates an expected call of GetClinician.
func (mr *MockClientInterfaceMockRecorder) GetClinician(ctx, clinicId, clinicianId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinician", reflect.TypeOf((*MockClientInterface)(nil).GetClinician), varargs...)
}

// GetEHRSettings mocks base method.
func (m *MockClientInterface) GetEHRSettings(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEHRSettings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEHRSettings indicates an expected call of GetEHRSettings.
func (mr *MockClientInterfaceMockRecorder) GetEHRSettings(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEHRSettings", reflect.TypeOf((*MockClientInterface)(nil).GetEHRSettings), varargs...)
}

// GetInvitedClinician mocks base method.
func (m *MockClientInterface) GetInvitedClinician(ctx context.Context, clinicId ClinicId, inviteId InviteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvitedClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitedClinician indicates an expected call of GetInvitedClinician.
func (mr *MockClientInterfaceMockRecorder) GetInvitedClinician(ctx, clinicId, inviteId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitedClinician", reflect.TypeOf((*MockClientInterface)(nil).GetInvitedClinician), varargs...)
}

// GetMRNSettings mocks base method.
func (m *MockClientInterface) GetMRNSettings(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMRNSettings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMRNSettings indicates an expected call of GetMRNSettings.
func (mr *MockClientInterfaceMockRecorder) GetMRNSettings(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMRNSettings", reflect.TypeOf((*MockClientInterface)(nil).GetMRNSettings), varargs...)
}

// GetMigration mocks base method.
func (m *MockClientInterface) GetMigration(ctx context.Context, clinicId Id, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMigration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigration indicates an expected call of GetMigration.
func (mr *MockClientInterfaceMockRecorder) GetMigration(ctx, clinicId, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigration", reflect.TypeOf((*MockClientInterface)(nil).GetMigration), varargs...)
}

// GetPatient mocks base method.
func (m *MockClientInterface) GetPatient(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatient indicates an expected call of GetPatient.
func (mr *MockClientInterfaceMockRecorder) GetPatient(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatient", reflect.TypeOf((*MockClientInterface)(nil).GetPatient), varargs...)
}

// GetPatientCount mocks base method.
func (m *MockClientInterface) GetPatientCount(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatientCount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientCount indicates an expected call of GetPatientCount.
func (mr *MockClientInterfaceMockRecorder) GetPatientCount(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientCount", reflect.TypeOf((*MockClientInterface)(nil).GetPatientCount), varargs...)
}

// GetPatientCountSettings mocks base method.
func (m *MockClientInterface) GetPatientCountSettings(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatientCountSettings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientCountSettings indicates an expected call of GetPatientCountSettings.
func (mr *MockClientInterfaceMockRecorder) GetPatientCountSettings(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientCountSettings", reflect.TypeOf((*MockClientInterface)(nil).GetPatientCountSettings), varargs...)
}

// ListAllClinicians mocks base method.
func (m *MockClientInterface) ListAllClinicians(ctx context.Context, params *ListAllCliniciansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllClinicians", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClinicians indicates an expected call of ListAllClinicians.
func (mr *MockClientInterfaceMockRecorder) ListAllClinicians(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClinicians", reflect.TypeOf((*MockClientInterface)(nil).ListAllClinicians), varargs...)
}

// ListClinicians mocks base method.
func (m *MockClientInterface) ListClinicians(ctx context.Context, clinicId ClinicId, params *ListCliniciansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicians", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicians indicates an expected call of ListClinicians.
func (mr *MockClientInterfaceMockRecorder) ListClinicians(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicians", reflect.TypeOf((*MockClientInterface)(nil).ListClinicians), varargs...)
}

// ListClinics mocks base method.
func (m *MockClientInterface) ListClinics(ctx context.Context, params *ListClinicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinics indicates an expected call of ListClinics.
func (mr *MockClientInterfaceMockRecorder) ListClinics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinics", reflect.TypeOf((*MockClientInterface)(nil).ListClinics), varargs...)
}

// ListClinicsForClinician mocks base method.
func (m *MockClientInterface) ListClinicsForClinician(ctx context.Context, userId UserId, params *ListClinicsForClinicianParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsForClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForClinician indicates an expected call of ListClinicsForClinician.
func (mr *MockClientInterfaceMockRecorder) ListClinicsForClinician(ctx, userId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForClinician", reflect.TypeOf((*MockClientInterface)(nil).ListClinicsForClinician), varargs...)
}

// ListClinicsForPatient mocks base method.
func (m *MockClientInterface) ListClinicsForPatient(ctx context.Context, userId UserId, params *ListClinicsForPatientParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsForPatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForPatient indicates an expected call of ListClinicsForPatient.
func (mr *MockClientInterfaceMockRecorder) ListClinicsForPatient(ctx, userId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForPatient", reflect.TypeOf((*MockClientInterface)(nil).ListClinicsForPatient), varargs...)
}

// ListMembershipRestrictions mocks base method.
func (m *MockClientInterface) ListMembershipRestrictions(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembershipRestrictions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembershipRestrictions indicates an expected call of ListMembershipRestrictions.
func (mr *MockClientInterfaceMockRecorder) ListMembershipRestrictions(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipRestrictions", reflect.TypeOf((*MockClientInterface)(nil).ListMembershipRestrictions), varargs...)
}

// ListMigrations mocks base method.
func (m *MockClientInterface) ListMigrations(ctx context.Context, clinicId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMigrations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMigrations indicates an expected call of ListMigrations.
func (mr *MockClientInterfaceMockRecorder) ListMigrations(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrations", reflect.TypeOf((*MockClientInterface)(nil).ListMigrations), varargs...)
}

// ListPatients mocks base method.
func (m *MockClientInterface) ListPatients(ctx context.Context, clinicId ClinicId, params *ListPatientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPatients", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPatients indicates an expected call of ListPatients.
func (mr *MockClientInterfaceMockRecorder) ListPatients(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPatients", reflect.TypeOf((*MockClientInterface)(nil).ListPatients), varargs...)
}

// MatchClinicAndPatient mocks base method.
func (m *MockClientInterface) MatchClinicAndPatient(ctx context.Context, body MatchClinicAndPatientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchClinicAndPatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchClinicAndPatient indicates an expected call of MatchClinicAndPatient.
func (mr *MockClientInterfaceMockRecorder) MatchClinicAndPatient(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchClinicAndPatient", reflect.TypeOf((*MockClientInterface)(nil).MatchClinicAndPatient), varargs...)
}

// MatchClinicAndPatientWithBody mocks base method.
func (m *MockClientInterface) MatchClinicAndPatientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchClinicAndPatientWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchClinicAndPatientWithBody indicates an expected call of MatchClinicAndPatientWithBody.
func (mr *MockClientInterfaceMockRecorder) MatchClinicAndPatientWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchClinicAndPatientWithBody", reflect.TypeOf((*MockClientInterface)(nil).MatchClinicAndPatientWithBody), varargs...)
}

// MergeClinic mocks base method.
func (m *MockClientInterface) MergeClinic(ctx context.Context, clinicId ClinicId, body MergeClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeClinic indicates an expected call of MergeClinic.
func (mr *MockClientInterfaceMockRecorder) MergeClinic(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeClinic", reflect.TypeOf((*MockClientInterface)(nil).MergeClinic), varargs...)
}

// MergeClinicWithBody mocks base method.
func (m *MockClientInterface) MergeClinicWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeClinicWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeClinicWithBody indicates an expected call of MergeClinicWithBody.
func (mr *MockClientInterfaceMockRecorder) MergeClinicWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeClinicWithBody", reflect.TypeOf((*MockClientInterface)(nil).MergeClinicWithBody), varargs...)
}

// MigrateLegacyClinicianPatients mocks base method.
func (m *MockClientInterface) MigrateLegacyClinicianPatients(ctx context.Context, clinicId string, body MigrateLegacyClinicianPatientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateLegacyClinicianPatients", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLegacyClinicianPatients indicates an expected call of MigrateLegacyClinicianPatients.
func (mr *MockClientInterfaceMockRecorder) MigrateLegacyClinicianPatients(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLegacyClinicianPatients", reflect.TypeOf((*MockClientInterface)(nil).MigrateLegacyClinicianPatients), varargs...)
}

// MigrateLegacyClinicianPatientsWithBody mocks base method.
func (m *MockClientInterface) MigrateLegacyClinicianPatientsWithBody(ctx context.Context, clinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateLegacyClinicianPatientsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLegacyClinicianPatientsWithBody indicates an expected call of MigrateLegacyClinicianPatientsWithBody.
func (mr *MockClientInterfaceMockRecorder) MigrateLegacyClinicianPatientsWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLegacyClinicianPatientsWithBody", reflect.TypeOf((*MockClientInterface)(nil).MigrateLegacyClinicianPatientsWithBody), varargs...)
}

// ProcessEHRMessage mocks base method.
func (m *MockClientInterface) ProcessEHRMessage(ctx context.Context, body ProcessEHRMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessEHRMessage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEHRMessage indicates an expected call of ProcessEHRMessage.
func (mr *MockClientInterfaceMockRecorder) ProcessEHRMessage(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEHRMessage", reflect.TypeOf((*MockClientInterface)(nil).ProcessEHRMessage), varargs...)
}

// ProcessEHRMessageWithBody mocks base method.
func (m *MockClientInterface) ProcessEHRMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessEHRMessageWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEHRMessageWithBody indicates an expected call of ProcessEHRMessageWithBody.
func (mr *MockClientInterfaceMockRecorder) ProcessEHRMessageWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEHRMessageWithBody", reflect.TypeOf((*MockClientInterface)(nil).ProcessEHRMessageWithBody), varargs...)
}

// SendDexcomConnectRequest mocks base method.
func (m *MockClientInterface) SendDexcomConnectRequest(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendDexcomConnectRequest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDexcomConnectRequest indicates an expected call of SendDexcomConnectRequest.
func (mr *MockClientInterfaceMockRecorder) SendDexcomConnectRequest(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDexcomConnectRequest", reflect.TypeOf((*MockClientInterface)(nil).SendDexcomConnectRequest), varargs...)
}

// SendUploadReminder mocks base method.
func (m *MockClientInterface) SendUploadReminder(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendUploadReminder", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUploadReminder indicates an expected call of SendUploadReminder.
func (mr *MockClientInterfaceMockRecorder) SendUploadReminder(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUploadReminder", reflect.TypeOf((*MockClientInterface)(nil).SendUploadReminder), varargs...)
}

// SyncEHRData mocks base method.
func (m *MockClientInterface) SyncEHRData(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncEHRData", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncEHRData indicates an expected call of SyncEHRData.
func (mr *MockClientInterfaceMockRecorder) SyncEHRData(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncEHRData", reflect.TypeOf((*MockClientInterface)(nil).SyncEHRData), varargs...)
}

// SyncEHRDataForPatient mocks base method.
func (m *MockClientInterface) SyncEHRDataForPatient(ctx context.Context, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncEHRDataForPatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncEHRDataForPatient indicates an expected call of SyncEHRDataForPatient.
func (mr *MockClientInterfaceMockRecorder) SyncEHRDataForPatient(ctx, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncEHRDataForPatient", reflect.TypeOf((*MockClientInterface)(nil).SyncEHRDataForPatient), varargs...)
}

// TideReport mocks base method.
func (m *MockClientInterface) TideReport(ctx context.Context, clinicId ClinicId, params *TideReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TideReport", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TideReport indicates an expected call of TideReport.
func (mr *MockClientInterfaceMockRecorder) TideReport(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TideReport", reflect.TypeOf((*MockClientInterface)(nil).TideReport), varargs...)
}

// TriggerInitialMigration mocks base method.
func (m *MockClientInterface) TriggerInitialMigration(ctx context.Context, clinicId string, body TriggerInitialMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerInitialMigration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerInitialMigration indicates an expected call of TriggerInitialMigration.
func (mr *MockClientInterfaceMockRecorder) TriggerInitialMigration(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerInitialMigration", reflect.TypeOf((*MockClientInterface)(nil).TriggerInitialMigration), varargs...)
}

// TriggerInitialMigrationWithBody mocks base method.
func (m *MockClientInterface) TriggerInitialMigrationWithBody(ctx context.Context, clinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerInitialMigrationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerInitialMigrationWithBody indicates an expected call of TriggerInitialMigrationWithBody.
func (mr *MockClientInterfaceMockRecorder) TriggerInitialMigrationWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerInitialMigrationWithBody", reflect.TypeOf((*MockClientInterface)(nil).TriggerInitialMigrationWithBody), varargs...)
}

// UpdateClinic mocks base method.
func (m *MockClientInterface) UpdateClinic(ctx context.Context, clinicId ClinicId, body UpdateClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinic indicates an expected call of UpdateClinic.
func (mr *MockClientInterfaceMockRecorder) UpdateClinic(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinic", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinic), varargs...)
}

// UpdateClinicUserDetails mocks base method.
func (m *MockClientInterface) UpdateClinicUserDetails(ctx context.Context, userId UserId, body UpdateClinicUserDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicUserDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicUserDetails indicates an expected call of UpdateClinicUserDetails.
func (mr *MockClientInterfaceMockRecorder) UpdateClinicUserDetails(ctx, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicUserDetails", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinicUserDetails), varargs...)
}

// UpdateClinicUserDetailsWithBody mocks base method.
func (m *MockClientInterface) UpdateClinicUserDetailsWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicUserDetailsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicUserDetailsWithBody indicates an expected call of UpdateClinicUserDetailsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateClinicUserDetailsWithBody(ctx, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicUserDetailsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinicUserDetailsWithBody), varargs...)
}

// UpdateClinicWithBody mocks base method.
func (m *MockClientInterface) UpdateClinicWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicWithBody indicates an expected call of UpdateClinicWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateClinicWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinicWithBody), varargs...)
}

// UpdateClinician mocks base method.
func (m *MockClientInterface) UpdateClinician(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, body UpdateClinicianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinician indicates an expected call of UpdateClinician.
func (mr *MockClientInterfaceMockRecorder) UpdateClinician(ctx, clinicId, clinicianId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinician", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinician), varargs...)
}

// UpdateClinicianWithBody mocks base method.
func (m *MockClientInterface) UpdateClinicianWithBody(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicianWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicianWithBody indicates an expected call of UpdateClinicianWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateClinicianWithBody(ctx, clinicId, clinicianId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicianWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinicianWithBody), varargs...)
}

// UpdateEHRSettings mocks base method.
func (m *MockClientInterface) UpdateEHRSettings(ctx context.Context, clinicId ClinicId, body UpdateEHRSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEHRSettings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEHRSettings indicates an expected call of UpdateEHRSettings.
func (mr *MockClientInterfaceMockRecorder) UpdateEHRSettings(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEHRSettings", reflect.TypeOf((*MockClientInterface)(nil).UpdateEHRSettings), varargs...)
}

// UpdateEHRSettingsWithBody mocks base method.
func (m *MockClientInterface) UpdateEHRSettingsWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEHRSettingsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEHRSettingsWithBody indicates an expected call of UpdateEHRSettingsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateEHRSettingsWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEHRSettingsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateEHRSettingsWithBody), varargs...)
}

// UpdateMRNSettings mocks base method.
func (m *MockClientInterface) UpdateMRNSettings(ctx context.Context, clinicId ClinicId, body UpdateMRNSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMRNSettings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMRNSettings indicates an expected call of UpdateMRNSettings.
func (mr *MockClientInterfaceMockRecorder) UpdateMRNSettings(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMRNSettings", reflect.TypeOf((*MockClientInterface)(nil).UpdateMRNSettings), varargs...)
}

// UpdateMRNSettingsWithBody mocks base method.
func (m *MockClientInterface) UpdateMRNSettingsWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMRNSettingsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMRNSettingsWithBody indicates an expected call of UpdateMRNSettingsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateMRNSettingsWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMRNSettingsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateMRNSettingsWithBody), varargs...)
}

// UpdateMembershipRestrictions mocks base method.
func (m *MockClientInterface) UpdateMembershipRestrictions(ctx context.Context, clinicId ClinicId, body UpdateMembershipRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMembershipRestrictions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembershipRestrictions indicates an expected call of UpdateMembershipRestrictions.
func (mr *MockClientInterfaceMockRecorder) UpdateMembershipRestrictions(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembershipRestrictions", reflect.TypeOf((*MockClientInterface)(nil).UpdateMembershipRestrictions), varargs...)
}

// UpdateMembershipRestrictionsWithBody mocks base method.
func (m *MockClientInterface) UpdateMembershipRestrictionsWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMembershipRestrictionsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembershipRestrictionsWithBody indicates an expected call of UpdateMembershipRestrictionsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateMembershipRestrictionsWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembershipRestrictionsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateMembershipRestrictionsWithBody), varargs...)
}

// UpdateMigration mocks base method.
func (m *MockClientInterface) UpdateMigration(ctx context.Context, clinicId Id, userId UserId, body UpdateMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMigration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigration indicates an expected call of UpdateMigration.
func (mr *MockClientInterfaceMockRecorder) UpdateMigration(ctx, clinicId, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigration", reflect.TypeOf((*MockClientInterface)(nil).UpdateMigration), varargs...)
}

// UpdateMigrationWithBody mocks base method.
func (m *MockClientInterface) UpdateMigrationWithBody(ctx context.Context, clinicId Id, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMigrationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigrationWithBody indicates an expected call of UpdateMigrationWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateMigrationWithBody(ctx, clinicId, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateMigrationWithBody), varargs...)
}

// UpdatePatient mocks base method.
func (m *MockClientInterface) UpdatePatient(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockClientInterfaceMockRecorder) UpdatePatient(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatient), varargs...)
}

// UpdatePatientCountSettings mocks base method.
func (m *MockClientInterface) UpdatePatientCountSettings(ctx context.Context, clinicId ClinicId, body UpdatePatientCountSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientCountSettings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientCountSettings indicates an expected call of UpdatePatientCountSettings.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientCountSettings(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientCountSettings", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientCountSettings), varargs...)
}

// UpdatePatientCountSettingsWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientCountSettingsWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientCountSettingsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientCountSettingsWithBody indicates an expected call of UpdatePatientCountSettingsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientCountSettingsWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientCountSettingsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientCountSettingsWithBody), varargs...)
}

// UpdatePatientDataSources mocks base method.
func (m *MockClientInterface) UpdatePatientDataSources(ctx context.Context, userId UserId, body UpdatePatientDataSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientDataSources", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientDataSources indicates an expected call of UpdatePatientDataSources.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientDataSources(ctx, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDataSources", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientDataSources), varargs...)
}

// UpdatePatientDataSourcesWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientDataSourcesWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientDataSourcesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientDataSourcesWithBody indicates an expected call of UpdatePatientDataSourcesWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientDataSourcesWithBody(ctx, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDataSourcesWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientDataSourcesWithBody), varargs...)
}

// UpdatePatientPermissions mocks base method.
func (m *MockClientInterface) UpdatePatientPermissions(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientPermissions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissions indicates an expected call of UpdatePatientPermissions.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientPermissions(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissions", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientPermissions), varargs...)
}

// UpdatePatientPermissionsWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientPermissionsWithBody(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientPermissionsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissionsWithBody indicates an expected call of UpdatePatientPermissionsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientPermissionsWithBody(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissionsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientPermissionsWithBody), varargs...)
}

// UpdatePatientReviews mocks base method.
func (m *MockClientInterface) UpdatePatientReviews(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientReviews", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientReviews indicates an expected call of UpdatePatientReviews.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientReviews(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientReviews", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientReviews), varargs...)
}

// UpdatePatientSummary mocks base method.
func (m *MockClientInterface) UpdatePatientSummary(ctx context.Context, patientId PatientId, body UpdatePatientSummaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientSummary", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientSummary indicates an expected call of UpdatePatientSummary.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientSummary(ctx, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientSummary", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientSummary), varargs...)
}

// UpdatePatientSummaryWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientSummaryWithBody(ctx context.Context, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientSummaryWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientSummaryWithBody indicates an expected call of UpdatePatientSummaryWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientSummaryWithBody(ctx, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientSummaryWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientSummaryWithBody), varargs...)
}

// UpdatePatientTag mocks base method.
func (m *MockClientInterface) UpdatePatientTag(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, body UpdatePatientTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientTag", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientTag indicates an expected call of UpdatePatientTag.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientTag(ctx, clinicId, patientTagId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientTag", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientTag), varargs...)
}

// UpdatePatientTagWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientTagWithBody(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientTagWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientTagWithBody indicates an expected call of UpdatePatientTagWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientTagWithBody(ctx, clinicId, patientTagId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientTagWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientTagWithBody), varargs...)
}

// UpdatePatientWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientWithBody(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientWithBody indicates an expected call of UpdatePatientWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientWithBody(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientWithBody), varargs...)
}

// UpdateSuppressedNotifications mocks base method.
func (m *MockClientInterface) UpdateSuppressedNotifications(ctx context.Context, clinicId ClinicId, body UpdateSuppressedNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSuppressedNotifications", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuppressedNotifications indicates an expected call of UpdateSuppressedNotifications.
func (mr *MockClientInterfaceMockRecorder) UpdateSuppressedNotifications(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuppressedNotifications", reflect.TypeOf((*MockClientInterface)(nil).UpdateSuppressedNotifications), varargs...)
}

// UpdateSuppressedNotificationsWithBody mocks base method.
func (m *MockClientInterface) UpdateSuppressedNotificationsWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSuppressedNotificationsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuppressedNotificationsWithBody indicates an expected call of UpdateSuppressedNotificationsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateSuppressedNotificationsWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuppressedNotificationsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateSuppressedNotificationsWithBody), varargs...)
}

// UpdateTier mocks base method.
func (m *MockClientInterface) UpdateTier(ctx context.Context, clinicId ClinicId, body UpdateTierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTier", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTier indicates an expected call of UpdateTier.
func (mr *MockClientInterfaceMockRecorder) UpdateTier(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTier", reflect.TypeOf((*MockClientInterface)(nil).UpdateTier), varargs...)
}

// UpdateTierWithBody mocks base method.
func (m *MockClientInterface) UpdateTierWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTierWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTierWithBody indicates an expected call of UpdateTierWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateTierWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTierWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateTierWithBody), varargs...)
}

// VerifyEndpoint mocks base method.
func (m *MockClientInterface) VerifyEndpoint(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyEndpoint", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEndpoint indicates an expected call of VerifyEndpoint.
func (mr *MockClientInterfaceMockRecorder) VerifyEndpoint(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEndpoint", reflect.TypeOf((*MockClientInterface)(nil).VerifyEndpoint), varargs...)
}

// ViewPDFReport mocks base method.
func (m *MockClientInterface) ViewPDFReport(ctx context.Context, params *ViewPDFReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ViewPDFReport", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewPDFReport indicates an expected call of ViewPDFReport.
func (mr *MockClientInterfaceMockRecorder) ViewPDFReport(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewPDFReport", reflect.TypeOf((*MockClientInterface)(nil).ViewPDFReport), varargs...)
}

// XealthGetProgramUrl mocks base method.
func (m *MockClientInterface) XealthGetProgramUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthGetProgramUrl", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthGetProgramUrl indicates an expected call of XealthGetProgramUrl.
func (mr *MockClientInterfaceMockRecorder) XealthGetProgramUrl(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthGetProgramUrl", reflect.TypeOf((*MockClientInterface)(nil).XealthGetProgramUrl), varargs...)
}

// XealthGetPrograms mocks base method.
func (m *MockClientInterface) XealthGetPrograms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthGetPrograms", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthGetPrograms indicates an expected call of XealthGetPrograms.
func (mr *MockClientInterfaceMockRecorder) XealthGetPrograms(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthGetPrograms", reflect.TypeOf((*MockClientInterface)(nil).XealthGetPrograms), varargs...)
}

// XealthNotification mocks base method.
func (m *MockClientInterface) XealthNotification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthNotification", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthNotification indicates an expected call of XealthNotification.
func (mr *MockClientInterfaceMockRecorder) XealthNotification(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthNotification", reflect.TypeOf((*MockClientInterface)(nil).XealthNotification), varargs...)
}

// XealthPreorder mocks base method.
func (m *MockClientInterface) XealthPreorder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthPreorder", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthPreorder indicates an expected call of XealthPreorder.
func (mr *MockClientInterfaceMockRecorder) XealthPreorder(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthPreorder", reflect.TypeOf((*MockClientInterface)(nil).XealthPreorder), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// AddServiceAccountWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AddServiceAccountWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddServiceAccountWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*AddServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceAccountWithBodyWithResponse indicates an expected call of AddServiceAccountWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AddServiceAccountWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAccountWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AddServiceAccountWithBodyWithResponse), varargs...)
}

// AddServiceAccountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AddServiceAccountWithResponse(ctx context.Context, clinicId ClinicId, body AddServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AddServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddServiceAccountWithResponse", varargs...)
	ret0, _ := ret[0].(*AddServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceAccountWithResponse indicates an expected call of AddServiceAccountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AddServiceAccountWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAccountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AddServiceAccountWithResponse), varargs...)
}

// AssignPatientTagToClinicPatientsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AssignPatientTagToClinicPatientsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignPatientTagToClinicPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignPatientTagToClinicPatientsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*AssignPatientTagToClinicPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPatientTagToClinicPatientsWithBodyWithResponse indicates an expected call of AssignPatientTagToClinicPatientsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AssignPatientTagToClinicPatientsWithBodyWithResponse(ctx, clinicId, patientTagId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPatientTagToClinicPatientsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AssignPatientTagToClinicPatientsWithBodyWithResponse), varargs...)
}

// AssignPatientTagToClinicPatientsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AssignPatientTagToClinicPatientsWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, body AssignPatientTagToClinicPatientsJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignPatientTagToClinicPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignPatientTagToClinicPatientsWithResponse", varargs...)
	ret0, _ := ret[0].(*AssignPatientTagToClinicPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPatientTagToClinicPatientsWithResponse indicates an expected call of AssignPatientTagToClinicPatientsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AssignPatientTagToClinicPatientsWithResponse(ctx, clinicId, patientTagId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPatientTagToClinicPatientsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AssignPatientTagToClinicPatientsWithResponse), varargs...)
}

// AssociateClinicianToUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AssociateClinicianToUserWithBodyWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateClinicianToUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateClinicianToUserWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*AssociateClinicianToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUserWithBodyWithResponse indicates an expected call of AssociateClinicianToUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AssociateClinicianToUserWithBodyWithResponse(ctx, clinicId, inviteId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AssociateClinicianToUserWithBodyWithResponse), varargs...)
}

// AssociateClinicianToUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AssociateClinicianToUserWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId, body AssociateClinicianToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateClinicianToUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateClinicianToUserWithResponse", varargs...)
	ret0, _ := ret[0].(*AssociateClinicianToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUserWithResponse indicates an expected call of AssociateClinicianToUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AssociateClinicianToUserWithResponse(ctx, clinicId, inviteId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AssociateClinicianToUserWithResponse), varargs...)
}

// CreateClinicWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicWithBodyWithResponse indicates an expected call of CreateClinicWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicWithBodyWithResponse), varargs...)
}

// CreateClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicWithResponse(ctx context.Context, body CreateClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicWithResponse indicates an expected call of CreateClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicWithResponse), varargs...)
}

// CreateClinicianWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicianWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicianWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicianWithBodyWithResponse indicates an expected call of CreateClinicianWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicianWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicianWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicianWithBodyWithResponse), varargs...)
}

// CreateClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicianWithResponse(ctx context.Context, clinicId ClinicId, body CreateClinicianJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicianWithResponse indicates an expected call of CreateClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicianWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicianWithResponse), varargs...)
}

// CreatePatientAccountWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientAccountWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientAccountWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePatientAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccountWithBodyWithResponse indicates an expected call of CreatePatientAccountWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientAccountWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccountWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientAccountWithBodyWithResponse), varargs...)
}

// CreatePatientAccountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientAccountWithResponse(ctx context.Context, clinicId ClinicId, body CreatePatientAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientAccountWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePatientAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccountWithResponse indicates an expected call of CreatePatientAccountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientAccountWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientAccountWithResponse), varargs...)
}

// CreatePatientFromUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientFromUserWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientFromUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientFromUserWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePatientFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUserWithBodyWithResponse indicates an expected call of CreatePatientFromUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientFromUserWithBodyWithResponse(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientFromUserWithBodyWithResponse), varargs...)
}

// CreatePatientFromUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientFromUserWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, body CreatePatientFromUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientFromUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientFromUserWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePatientFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUserWithResponse indicates an expected call of CreatePatientFromUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientFromUserWithResponse(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientFromUserWithResponse), varargs...)
}

// CreatePatientTagWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientTagWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientTagWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePatientTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientTagWithBodyWithResponse indicates an expected call of CreatePatientTagWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientTagWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientTagWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientTagWithBodyWithResponse), varargs...)
}

// CreatePatientTagWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientTagWithResponse(ctx context.Context, clinicId ClinicId, body CreatePatientTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientTagWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePatientTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientTagWithResponse indicates an expected call of CreatePatientTagWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientTagWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientTagWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientTagWithResponse), varargs...)
}

// DeleteClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteClinicWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*DeleteClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClinicWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClinicWithResponse indicates an expected call of DeleteClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteClinicWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteClinicWithResponse), varargs...)
}

// DeleteClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteClinicianWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, reqEditors ...RequestEditorFn) (*DeleteClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClinicianWithResponse indicates an expected call of DeleteClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteClinicianWithResponse(ctx, clinicId, clinicianId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteClinicianWithResponse), varargs...)
}

// DeleteInvitedClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteInvitedClinicianWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId, reqEditors ...RequestEditorFn) (*DeleteInvitedClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInvitedClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteInvitedClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitedClinicianWithResponse indicates an expected call of DeleteInvitedClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteInvitedClinicianWithResponse(ctx, clinicId, inviteId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitedClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteInvitedClinicianWithResponse), varargs...)
}

// DeletePatientPermissionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientPermissionWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, permission string, reqEditors ...RequestEditorFn) (*DeletePatientPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, permission}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientPermissionWithResponse", varargs...)
	ret0, _ := ret[0].(*DeletePatientPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientPermissionWithResponse indicates an expected call of DeletePatientPermissionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientPermissionWithResponse(ctx, clinicId, patientId, permission interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, permission}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientPermissionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientPermissionWithResponse), varargs...)
}

// DeletePatientReviewsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientReviewsWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*DeletePatientReviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientReviewsWithResponse", varargs...)
	ret0, _ := ret[0].(*DeletePatientReviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientReviewsWithResponse indicates an expected call of DeletePatientReviewsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientReviewsWithResponse(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientReviewsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientReviewsWithResponse), varargs...)
}

// DeletePatientTagFromClinicPatientsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientTagFromClinicPatientsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePatientTagFromClinicPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientTagFromClinicPatientsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*DeletePatientTagFromClinicPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientTagFromClinicPatientsWithBodyWithResponse indicates an expected call of DeletePatientTagFromClinicPatientsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientTagFromClinicPatientsWithBodyWithResponse(ctx, clinicId, patientTagId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTagFromClinicPatientsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientTagFromClinicPatientsWithBodyWithResponse), varargs...)
}

// DeletePatientTagFromClinicPatientsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientTagFromClinicPatientsWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, body DeletePatientTagFromClinicPatientsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePatientTagFromClinicPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientTagFromClinicPatientsWithResponse", varargs...)
	ret0, _ := ret[0].(*DeletePatientTagFromClinicPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientTagFromClinicPatientsWithResponse indicates an expected call of DeletePatientTagFromClinicPatientsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientTagFromClinicPatientsWithResponse(ctx, clinicId, patientTagId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTagFromClinicPatientsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientTagFromClinicPatientsWithResponse), varargs...)
}

// DeletePatientTagWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientTagWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, reqEditors ...RequestEditorFn) (*DeletePatientTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientTagWithResponse", varargs...)
	ret0, _ := ret[0].(*DeletePatientTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientTagWithResponse indicates an expected call of DeletePatientTagWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientTagWithResponse(ctx, clinicId, patientTagId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTagWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientTagWithResponse), varargs...)
}

// DeletePatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*DeletePatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientWithResponse", varargs...)
	ret0, _ := ret[0].(*DeletePatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientWithResponse indicates an expected call of DeletePatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientWithResponse(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientWithResponse), varargs...)
}

// DeleteUserFromClinicsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteUserFromClinicsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserFromClinicsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserFromClinicsWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteUserFromClinicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFromClinicsWithResponse indicates an expected call of DeleteUserFromClinicsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteUserFromClinicsWithResponse(ctx, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromClinicsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteUserFromClinicsWithResponse), varargs...)
}

// EnableNewClinicExperienceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EnableNewClinicExperienceWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*EnableNewClinicExperienceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableNewClinicExperienceWithResponse", varargs...)
	ret0, _ := ret[0].(*EnableNewClinicExperienceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableNewClinicExperienceWithResponse indicates an expected call of EnableNewClinicExperienceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EnableNewClinicExperienceWithResponse(ctx, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableNewClinicExperienceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EnableNewClinicExperienceWithResponse), varargs...)
}

// FindPatientsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) FindPatientsWithResponse(ctx context.Context, params *FindPatientsParams, reqEditors ...RequestEditorFn) (*FindPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPatientsWithResponse", varargs...)
	ret0, _ := ret[0].(*FindPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPatientsWithResponse indicates an expected call of FindPatientsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) FindPatientsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPatientsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).FindPatientsWithResponse), varargs...)
}

// GenerateMergeReportWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GenerateMergeReportWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateMergeReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateMergeReportWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*GenerateMergeReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMergeReportWithBodyWithResponse indicates an expected call of GenerateMergeReportWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GenerateMergeReportWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMergeReportWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GenerateMergeReportWithBodyWithResponse), varargs...)
}

// GenerateMergeReportWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GenerateMergeReportWithResponse(ctx context.Context, clinicId ClinicId, body GenerateMergeReportJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateMergeReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateMergeReportWithResponse", varargs...)
	ret0, _ := ret[0].(*GenerateMergeReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMergeReportWithResponse indicates an expected call of GenerateMergeReportWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GenerateMergeReportWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMergeReportWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GenerateMergeReportWithResponse), varargs...)
}

// GetClinicByShareCodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetClinicByShareCodeWithResponse(ctx context.Context, shareCode string, reqEditors ...RequestEditorFn) (*GetClinicByShareCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, shareCode}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinicByShareCodeWithResponse", varargs...)
	ret0, _ := ret[0].(*GetClinicByShareCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicByShareCodeWithResponse indicates an expected call of GetClinicByShareCodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetClinicByShareCodeWithResponse(ctx, shareCode interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, shareCode}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicByShareCodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetClinicByShareCodeWithResponse), varargs...)
}

// GetClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetClinicWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*GetClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinicWithResponse", varargs...)
	ret0, _ := ret[0].(*GetClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicWithResponse indicates an expected call of GetClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetClinicWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetClinicWithResponse), varargs...)
}

// GetClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetClinicianWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, reqEditors ...RequestEditorFn) (*GetClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*GetClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicianWithResponse indicates an expected call of GetClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetClinicianWithResponse(ctx, clinicId, clinicianId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetClinicianWithResponse), varargs...)
}

// GetEHRSettingsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetEHRSettingsWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*GetEHRSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEHRSettingsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetEHRSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEHRSettingsWithResponse indicates an expected call of GetEHRSettingsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetEHRSettingsWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEHRSettingsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetEHRSettingsWithResponse), varargs...)
}

// GetInvitedClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetInvitedClinicianWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId, reqEditors ...RequestEditorFn) (*GetInvitedClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvitedClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*GetInvitedClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitedClinicianWithResponse indicates an expected call of GetInvitedClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetInvitedClinicianWithResponse(ctx, clinicId, inviteId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitedClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetInvitedClinicianWithResponse), varargs...)
}

// GetMRNSettingsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetMRNSettingsWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*GetMRNSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMRNSettingsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetMRNSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMRNSettingsWithResponse indicates an expected call of GetMRNSettingsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetMRNSettingsWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMRNSettingsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetMRNSettingsWithResponse), varargs...)
}

// GetMigrationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetMigrationWithResponse(ctx context.Context, clinicId Id, userId UserId, reqEditors ...RequestEditorFn) (*GetMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMigrationWithResponse", varargs...)
	ret0, _ := ret[0].(*GetMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationWithResponse indicates an expected call of GetMigrationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetMigrationWithResponse(ctx, clinicId, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetMigrationWithResponse), varargs...)
}

// GetPatientCountSettingsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetPatientCountSettingsWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*GetPatientCountSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatientCountSettingsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetPatientCountSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientCountSettingsWithResponse indicates an expected call of GetPatientCountSettingsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetPatientCountSettingsWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientCountSettingsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetPatientCountSettingsWithResponse), varargs...)
}

// GetPatientCountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetPatientCountWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*GetPatientCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatientCountWithResponse", varargs...)
	ret0, _ := ret[0].(*GetPatientCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientCountWithResponse indicates an expected call of GetPatientCountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetPatientCountWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientCountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetPatientCountWithResponse), varargs...)
}

// GetPatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetPatientWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*GetPatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatientWithResponse", varargs...)
	ret0, _ := ret[0].(*GetPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientWithResponse indicates an expected call of GetPatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetPatientWithResponse(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetPatientWithResponse), varargs...)
}

// ListAllCliniciansWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListAllCliniciansWithResponse(ctx context.Context, params *ListAllCliniciansParams, reqEditors ...RequestEditorFn) (*ListAllCliniciansResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllCliniciansWithResponse", varargs...)
	ret0, _ := ret[0].(*ListAllCliniciansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCliniciansWithResponse indicates an expected call of ListAllCliniciansWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListAllCliniciansWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCliniciansWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListAllCliniciansWithResponse), varargs...)
}

// ListCliniciansWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListCliniciansWithResponse(ctx context.Context, clinicId ClinicId, params *ListCliniciansParams, reqEditors ...RequestEditorFn) (*ListCliniciansResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCliniciansWithResponse", varargs...)
	ret0, _ := ret[0].(*ListCliniciansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCliniciansWithResponse indicates an expected call of ListCliniciansWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListCliniciansWithResponse(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCliniciansWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListCliniciansWithResponse), varargs...)
}

// ListClinicsForClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListClinicsForClinicianWithResponse(ctx context.Context, userId UserId, params *ListClinicsForClinicianParams, reqEditors ...RequestEditorFn) (*ListClinicsForClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsForClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*ListClinicsForClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForClinicianWithResponse indicates an expected call of ListClinicsForClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListClinicsForClinicianWithResponse(ctx, userId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListClinicsForClinicianWithResponse), varargs...)
}

// ListClinicsForPatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListClinicsForPatientWithResponse(ctx context.Context, userId UserId, params *ListClinicsForPatientParams, reqEditors ...RequestEditorFn) (*ListClinicsForPatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsForPatientWithResponse", varargs...)
	ret0, _ := ret[0].(*ListClinicsForPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForPatientWithResponse indicates an expected call of ListClinicsForPatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListClinicsForPatientWithResponse(ctx, userId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForPatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListClinicsForPatientWithResponse), varargs...)
}

// ListClinicsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListClinicsWithResponse(ctx context.Context, params *ListClinicsParams, reqEditors ...RequestEditorFn) (*ListClinicsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsWithResponse", varargs...)
	ret0, _ := ret[0].(*ListClinicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsWithResponse indicates an expected call of ListClinicsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListClinicsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListClinicsWithResponse), varargs...)
}

// ListMembershipRestrictionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListMembershipRestrictionsWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*ListMembershipRestrictionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembershipRestrictionsWithResponse", varargs...)
	ret0, _ := ret[0].(*ListMembershipRestrictionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembershipRestrictionsWithResponse indicates an expected call of ListMembershipRestrictionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListMembershipRestrictionsWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipRestrictionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListMembershipRestrictionsWithResponse), varargs...)
}

// ListMigrationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListMigrationsWithResponse(ctx context.Context, clinicId string, reqEditors ...RequestEditorFn) (*ListMigrationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMigrationsWithResponse", varargs...)
	ret0, _ := ret[0].(*ListMigrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMigrationsWithResponse indicates an expected call of ListMigrationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListMigrationsWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListMigrationsWithResponse), varargs...)
}

// ListPatientsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListPatientsWithResponse(ctx context.Context, clinicId ClinicId, params *ListPatientsParams, reqEditors ...RequestEditorFn) (*ListPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPatientsWithResponse", varargs...)
	ret0, _ := ret[0].(*ListPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPatientsWithResponse indicates an expected call of ListPatientsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListPatientsWithResponse(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPatientsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListPatientsWithResponse), varargs...)
}

// MatchClinicAndPatientWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) MatchClinicAndPatientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MatchClinicAndPatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchClinicAndPatientWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*MatchClinicAndPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchClinicAndPatientWithBodyWithResponse indicates an expected call of MatchClinicAndPatientWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) MatchClinicAndPatientWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchClinicAndPatientWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).MatchClinicAndPatientWithBodyWithResponse), varargs...)
}

// MatchClinicAndPatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) MatchClinicAndPatientWithResponse(ctx context.Context, body MatchClinicAndPatientJSONRequestBody, reqEditors ...RequestEditorFn) (*MatchClinicAndPatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchClinicAndPatientWithResponse", varargs...)
	ret0, _ := ret[0].(*MatchClinicAndPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchClinicAndPatientWithResponse indicates an expected call of MatchClinicAndPatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) MatchClinicAndPatientWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchClinicAndPatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).MatchClinicAndPatientWithResponse), varargs...)
}

// MergeClinicWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) MergeClinicWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergeClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeClinicWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*MergeClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeClinicWithBodyWithResponse indicates an expected call of MergeClinicWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) MergeClinicWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeClinicWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).MergeClinicWithBodyWithResponse), varargs...)
}

// MergeClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) MergeClinicWithResponse(ctx context.Context, clinicId ClinicId, body MergeClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*MergeClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeClinicWithResponse", varargs...)
	ret0, _ := ret[0].(*MergeClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeClinicWithResponse indicates an expected call of MergeClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) MergeClinicWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).MergeClinicWithResponse), varargs...)
}

// MigrateLegacyClinicianPatientsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) MigrateLegacyClinicianPatientsWithBodyWithResponse(ctx context.Context, clinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateLegacyClinicianPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateLegacyClinicianPatientsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*MigrateLegacyClinicianPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLegacyClinicianPatientsWithBodyWithResponse indicates an expected call of MigrateLegacyClinicianPatientsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) MigrateLegacyClinicianPatientsWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLegacyClinicianPatientsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).MigrateLegacyClinicianPatientsWithBodyWithResponse), varargs...)
}

// MigrateLegacyClinicianPatientsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) MigrateLegacyClinicianPatientsWithResponse(ctx context.Context, clinicId string, body MigrateLegacyClinicianPatientsJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateLegacyClinicianPatientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateLegacyClinicianPatientsWithResponse", varargs...)
	ret0, _ := ret[0].(*MigrateLegacyClinicianPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLegacyClinicianPatientsWithResponse indicates an expected call of MigrateLegacyClinicianPatientsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) MigrateLegacyClinicianPatientsWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLegacyClinicianPatientsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).MigrateLegacyClinicianPatientsWithResponse), varargs...)
}

// ProcessEHRMessageWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProcessEHRMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessEHRMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessEHRMessageWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ProcessEHRMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEHRMessageWithBodyWithResponse indicates an expected call of ProcessEHRMessageWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProcessEHRMessageWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEHRMessageWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProcessEHRMessageWithBodyWithResponse), varargs...)
}

// ProcessEHRMessageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ProcessEHRMessageWithResponse(ctx context.Context, body ProcessEHRMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessEHRMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessEHRMessageWithResponse", varargs...)
	ret0, _ := ret[0].(*ProcessEHRMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEHRMessageWithResponse indicates an expected call of ProcessEHRMessageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ProcessEHRMessageWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEHRMessageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ProcessEHRMessageWithResponse), varargs...)
}

// SendDexcomConnectRequestWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SendDexcomConnectRequestWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*SendDexcomConnectRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendDexcomConnectRequestWithResponse", varargs...)
	ret0, _ := ret[0].(*SendDexcomConnectRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDexcomConnectRequestWithResponse indicates an expected call of SendDexcomConnectRequestWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SendDexcomConnectRequestWithResponse(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDexcomConnectRequestWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SendDexcomConnectRequestWithResponse), varargs...)
}

// SendUploadReminderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SendUploadReminderWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*SendUploadReminderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendUploadReminderWithResponse", varargs...)
	ret0, _ := ret[0].(*SendUploadReminderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUploadReminderWithResponse indicates an expected call of SendUploadReminderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SendUploadReminderWithResponse(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUploadReminderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SendUploadReminderWithResponse), varargs...)
}

// SyncEHRDataForPatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SyncEHRDataForPatientWithResponse(ctx context.Context, patientId PatientId, reqEditors ...RequestEditorFn) (*SyncEHRDataForPatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncEHRDataForPatientWithResponse", varargs...)
	ret0, _ := ret[0].(*SyncEHRDataForPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncEHRDataForPatientWithResponse indicates an expected call of SyncEHRDataForPatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SyncEHRDataForPatientWithResponse(ctx, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncEHRDataForPatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SyncEHRDataForPatientWithResponse), varargs...)
}

// SyncEHRDataWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SyncEHRDataWithResponse(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*SyncEHRDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncEHRDataWithResponse", varargs...)
	ret0, _ := ret[0].(*SyncEHRDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncEHRDataWithResponse indicates an expected call of SyncEHRDataWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SyncEHRDataWithResponse(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncEHRDataWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SyncEHRDataWithResponse), varargs...)
}

// TideReportWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TideReportWithResponse(ctx context.Context, clinicId ClinicId, params *TideReportParams, reqEditors ...RequestEditorFn) (*TideReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TideReportWithResponse", varargs...)
	ret0, _ := ret[0].(*TideReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TideReportWithResponse indicates an expected call of TideReportWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TideReportWithResponse(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TideReportWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TideReportWithResponse), varargs...)
}

// TriggerInitialMigrationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TriggerInitialMigrationWithBodyWithResponse(ctx context.Context, clinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerInitialMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerInitialMigrationWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*TriggerInitialMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerInitialMigrationWithBodyWithResponse indicates an expected call of TriggerInitialMigrationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TriggerInitialMigrationWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerInitialMigrationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TriggerInitialMigrationWithBodyWithResponse), varargs...)
}

// TriggerInitialMigrationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TriggerInitialMigrationWithResponse(ctx context.Context, clinicId string, body TriggerInitialMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerInitialMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerInitialMigrationWithResponse", varargs...)
	ret0, _ := ret[0].(*TriggerInitialMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerInitialMigrationWithResponse indicates an expected call of TriggerInitialMigrationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TriggerInitialMigrationWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerInitialMigrationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TriggerInitialMigrationWithResponse), varargs...)
}

// UpdateClinicUserDetailsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicUserDetailsWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClinicUserDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicUserDetailsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateClinicUserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicUserDetailsWithBodyWithResponse indicates an expected call of UpdateClinicUserDetailsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicUserDetailsWithBodyWithResponse(ctx, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicUserDetailsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicUserDetailsWithBodyWithResponse), varargs...)
}

// UpdateClinicUserDetailsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicUserDetailsWithResponse(ctx context.Context, userId UserId, body UpdateClinicUserDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClinicUserDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicUserDetailsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateClinicUserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicUserDetailsWithResponse indicates an expected call of UpdateClinicUserDetailsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicUserDetailsWithResponse(ctx, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicUserDetailsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicUserDetailsWithResponse), varargs...)
}

// UpdateClinicWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicWithBodyWithResponse indicates an expected call of UpdateClinicWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicWithBodyWithResponse), varargs...)
}

// UpdateClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicWithResponse(ctx context.Context, clinicId ClinicId, body UpdateClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClinicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicWithResponse indicates an expected call of UpdateClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicWithResponse), varargs...)
}

// UpdateClinicianWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicianWithBodyWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicianWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicianWithBodyWithResponse indicates an expected call of UpdateClinicianWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicianWithBodyWithResponse(ctx, clinicId, clinicianId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicianWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicianWithBodyWithResponse), varargs...)
}

// UpdateClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicianWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, body UpdateClinicianJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClinicianResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicianWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicianWithResponse indicates an expected call of UpdateClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicianWithResponse(ctx, clinicId, clinicianId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicianWithResponse), varargs...)
}

// UpdateEHRSettingsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateEHRSettingsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEHRSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEHRSettingsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateEHRSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEHRSettingsWithBodyWithResponse indicates an expected call of UpdateEHRSettingsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateEHRSettingsWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEHRSettingsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateEHRSettingsWithBodyWithResponse), varargs...)
}

// UpdateEHRSettingsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateEHRSettingsWithResponse(ctx context.Context, clinicId ClinicId, body UpdateEHRSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEHRSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEHRSettingsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateEHRSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEHRSettingsWithResponse indicates an expected call of UpdateEHRSettingsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateEHRSettingsWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEHRSettingsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateEHRSettingsWithResponse), varargs...)
}

// UpdateMRNSettingsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateMRNSettingsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMRNSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMRNSettingsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateMRNSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMRNSettingsWithBodyWithResponse indicates an expected call of UpdateMRNSettingsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateMRNSettingsWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMRNSettingsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateMRNSettingsWithBodyWithResponse), varargs...)
}

// UpdateMRNSettingsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateMRNSettingsWithResponse(ctx context.Context, clinicId ClinicId, body UpdateMRNSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMRNSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMRNSettingsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateMRNSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMRNSettingsWithResponse indicates an expected call of UpdateMRNSettingsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateMRNSettingsWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMRNSettingsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateMRNSettingsWithResponse), varargs...)
}

// UpdateMembershipRestrictionsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateMembershipRestrictionsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMembershipRestrictionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMembershipRestrictionsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateMembershipRestrictionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembershipRestrictionsWithBodyWithResponse indicates an expected call of UpdateMembershipRestrictionsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateMembershipRestrictionsWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembershipRestrictionsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateMembershipRestrictionsWithBodyWithResponse), varargs...)
}

// UpdateMembershipRestrictionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateMembershipRestrictionsWithResponse(ctx context.Context, clinicId ClinicId, body UpdateMembershipRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMembershipRestrictionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMembershipRestrictionsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateMembershipRestrictionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembershipRestrictionsWithResponse indicates an expected call of UpdateMembershipRestrictionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateMembershipRestrictionsWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembershipRestrictionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateMembershipRestrictionsWithResponse), varargs...)
}

// UpdateMigrationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateMigrationWithBodyWithResponse(ctx context.Context, clinicId Id, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMigrationWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigrationWithBodyWithResponse indicates an expected call of UpdateMigrationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateMigrationWithBodyWithResponse(ctx, clinicId, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateMigrationWithBodyWithResponse), varargs...)
}

// UpdateMigrationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateMigrationWithResponse(ctx context.Context, clinicId Id, userId UserId, body UpdateMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMigrationWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigrationWithResponse indicates an expected call of UpdateMigrationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateMigrationWithResponse(ctx, clinicId, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateMigrationWithResponse), varargs...)
}

// UpdatePatientCountSettingsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientCountSettingsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientCountSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientCountSettingsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientCountSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientCountSettingsWithBodyWithResponse indicates an expected call of UpdatePatientCountSettingsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientCountSettingsWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientCountSettingsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientCountSettingsWithBodyWithResponse), varargs...)
}

// UpdatePatientCountSettingsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientCountSettingsWithResponse(ctx context.Context, clinicId ClinicId, body UpdatePatientCountSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientCountSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientCountSettingsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientCountSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientCountSettingsWithResponse indicates an expected call of UpdatePatientCountSettingsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientCountSettingsWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientCountSettingsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientCountSettingsWithResponse), varargs...)
}

// UpdatePatientDataSourcesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientDataSourcesWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientDataSourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientDataSourcesWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientDataSourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientDataSourcesWithBodyWithResponse indicates an expected call of UpdatePatientDataSourcesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientDataSourcesWithBodyWithResponse(ctx, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDataSourcesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientDataSourcesWithBodyWithResponse), varargs...)
}

// UpdatePatientDataSourcesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientDataSourcesWithResponse(ctx context.Context, userId UserId, body UpdatePatientDataSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientDataSourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientDataSourcesWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientDataSourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientDataSourcesWithResponse indicates an expected call of UpdatePatientDataSourcesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientDataSourcesWithResponse(ctx, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDataSourcesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientDataSourcesWithResponse), varargs...)
}

// UpdatePatientPermissionsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientPermissionsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientPermissionsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissionsWithBodyWithResponse indicates an expected call of UpdatePatientPermissionsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientPermissionsWithBodyWithResponse(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissionsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientPermissionsWithBodyWithResponse), varargs...)
}

// UpdatePatientPermissionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientPermissionsWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientPermissionsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissionsWithResponse indicates an expected call of UpdatePatientPermissionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientPermissionsWithResponse(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientPermissionsWithResponse), varargs...)
}

// UpdatePatientReviewsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientReviewsWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*UpdatePatientReviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientReviewsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientReviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientReviewsWithResponse indicates an expected call of UpdatePatientReviewsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientReviewsWithResponse(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientReviewsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientReviewsWithResponse), varargs...)
}

// UpdatePatientSummaryWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientSummaryWithBodyWithResponse(ctx context.Context, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientSummaryWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientSummaryWithBodyWithResponse indicates an expected call of UpdatePatientSummaryWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientSummaryWithBodyWithResponse(ctx, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientSummaryWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientSummaryWithBodyWithResponse), varargs...)
}

// UpdatePatientSummaryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientSummaryWithResponse(ctx context.Context, patientId PatientId, body UpdatePatientSummaryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientSummaryWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientSummaryWithResponse indicates an expected call of UpdatePatientSummaryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientSummaryWithResponse(ctx, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientSummaryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientSummaryWithResponse), varargs...)
}

// UpdatePatientTagWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientTagWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientTagWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientTagWithBodyWithResponse indicates an expected call of UpdatePatientTagWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientTagWithBodyWithResponse(ctx, clinicId, patientTagId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientTagWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientTagWithBodyWithResponse), varargs...)
}

// UpdatePatientTagWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientTagWithResponse(ctx context.Context, clinicId ClinicId, patientTagId PatientTagId, body UpdatePatientTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientTagId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientTagWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientTagWithResponse indicates an expected call of UpdatePatientTagWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientTagWithResponse(ctx, clinicId, patientTagId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientTagId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientTagWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientTagWithResponse), varargs...)
}

// UpdatePatientWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientWithBodyWithResponse indicates an expected call of UpdatePatientWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientWithBodyWithResponse(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientWithBodyWithResponse), varargs...)
}

// UpdatePatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdatePatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientWithResponse indicates an expected call of UpdatePatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientWithResponse(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientWithResponse), varargs...)
}

// UpdateSuppressedNotificationsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateSuppressedNotificationsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSuppressedNotificationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSuppressedNotificationsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateSuppressedNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuppressedNotificationsWithBodyWithResponse indicates an expected call of UpdateSuppressedNotificationsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateSuppressedNotificationsWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuppressedNotificationsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateSuppressedNotificationsWithBodyWithResponse), varargs...)
}

// UpdateSuppressedNotificationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateSuppressedNotificationsWithResponse(ctx context.Context, clinicId ClinicId, body UpdateSuppressedNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSuppressedNotificationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSuppressedNotificationsWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateSuppressedNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuppressedNotificationsWithResponse indicates an expected call of UpdateSuppressedNotificationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateSuppressedNotificationsWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuppressedNotificationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateSuppressedNotificationsWithResponse), varargs...)
}

// UpdateTierWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateTierWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTierWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateTierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTierWithBodyWithResponse indicates an expected call of UpdateTierWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateTierWithBodyWithResponse(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTierWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateTierWithBodyWithResponse), varargs...)
}

// UpdateTierWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateTierWithResponse(ctx context.Context, clinicId ClinicId, body UpdateTierJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTierWithResponse", varargs...)
	ret0, _ := ret[0].(*UpdateTierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTierWithResponse indicates an expected call of UpdateTierWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateTierWithResponse(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTierWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateTierWithResponse), varargs...)
}

// VerifyEndpointWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) VerifyEndpointWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VerifyEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyEndpointWithResponse", varargs...)
	ret0, _ := ret[0].(*VerifyEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEndpointWithResponse indicates an expected call of VerifyEndpointWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) VerifyEndpointWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEndpointWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).VerifyEndpointWithResponse), varargs...)
}

// ViewPDFReportWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ViewPDFReportWithResponse(ctx context.Context, params *ViewPDFReportParams, reqEditors ...RequestEditorFn) (*ViewPDFReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ViewPDFReportWithResponse", varargs...)
	ret0, _ := ret[0].(*ViewPDFReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewPDFReportWithResponse indicates an expected call of ViewPDFReportWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ViewPDFReportWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewPDFReportWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ViewPDFReportWithResponse), varargs...)
}

// XealthGetProgramUrlWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) XealthGetProgramUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*XealthGetProgramUrlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthGetProgramUrlWithResponse", varargs...)
	ret0, _ := ret[0].(*XealthGetProgramUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthGetProgramUrlWithResponse indicates an expected call of XealthGetProgramUrlWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) XealthGetProgramUrlWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthGetProgramUrlWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).XealthGetProgramUrlWithResponse), varargs...)
}

// XealthGetProgramsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) XealthGetProgramsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*XealthGetProgramsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthGetProgramsWithResponse", varargs...)
	ret0, _ := ret[0].(*XealthGetProgramsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthGetProgramsWithResponse indicates an expected call of XealthGetProgramsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) XealthGetProgramsWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthGetProgramsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).XealthGetProgramsWithResponse), varargs...)
}

// XealthNotificationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) XealthNotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*XealthNotificationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthNotificationWithResponse", varargs...)
	ret0, _ := ret[0].(*XealthNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthNotificationWithResponse indicates an expected call of XealthNotificationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) XealthNotificationWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthNotificationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).XealthNotificationWithResponse), varargs...)
}

// XealthPreorderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) XealthPreorderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*XealthPreorderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XealthPreorderWithResponse", varargs...)
	ret0, _ := ret[0].(*XealthPreorderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XealthPreorderWithResponse indicates an expected call of XealthPreorderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) XealthPreorderWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XealthPreorderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).XealthPreorderWithResponse), varargs...)
}
