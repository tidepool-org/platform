// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	SessionTokenScopes = "sessionToken.Scopes"
)

// Defines values for AverageGlucoseUnits.
const (
	AverageGlucoseUnitsMmolL AverageGlucoseUnits = "mmol/L"
	AverageGlucoseUnitsMmoll AverageGlucoseUnits = "mmol/l"
)

// Defines values for ClinicClinicSize.
const (
	N0249   ClinicClinicSize = "0-249"
	N1000   ClinicClinicSize = "1000+"
	N250499 ClinicClinicSize = "250-499"
	N500999 ClinicClinicSize = "500-999"
)

// Defines values for ClinicClinicType.
const (
	HealthcareSystem ClinicClinicType = "healthcare_system"
	Other            ClinicClinicType = "other"
	ProviderPractice ClinicClinicType = "provider_practice"
	Researcher       ClinicClinicType = "researcher"
	VeterinaryClinic ClinicClinicType = "veterinary_clinic"
)

// Defines values for ClinicPreferredBgUnits.
const (
	ClinicPreferredBgUnitsMgdL  ClinicPreferredBgUnits = "mg/dL"
	ClinicPreferredBgUnitsMmolL ClinicPreferredBgUnits = "mmol/L"
)

// Defines values for DataSourceState.
const (
	DataSourceStateConnected        DataSourceState = "connected"
	DataSourceStateDisconnected     DataSourceState = "disconnected"
	DataSourceStateError            DataSourceState = "error"
	DataSourceStatePending          DataSourceState = "pending"
	DataSourceStatePendingReconnect DataSourceState = "pendingReconnect"
)

// Defines values for EHRMatchActionActionType.
const (
	DISABLESUMARYANDREPORTSSUBSCRIPTION EHRMatchActionActionType = "DISABLE_SUMARY_AND_REPORTS_SUBSCRIPTION"
	ENABLESUMARYANDREPORTSSUBSCRIPTION  EHRMatchActionActionType = "ENABLE_SUMARY_AND_REPORTS_SUBSCRIPTION"
)

// Defines values for EHRMatchMessageRefDataModel.
const (
	Order EHRMatchMessageRefDataModel = "Order"
)

// Defines values for EHRMatchMessageRefEventType.
const (
	New EHRMatchMessageRefEventType = "New"
)

// Defines values for MigrationStatus.
const (
	COMPLETED MigrationStatus = "COMPLETED"
	PENDING   MigrationStatus = "PENDING"
	RUNNING   MigrationStatus = "RUNNING"
)

// Defines values for Tier.
const (
	Tier0100 Tier = "tier0100"
	Tier0200 Tier = "tier0200"
	Tier0300 Tier = "tier0300"
	Tier0400 Tier = "tier0400"
)

// AssociateClinicianToUser defines model for AssociateClinicianToUser.
type AssociateClinicianToUser struct {
	UserId string `json:"userId"`
}

// AverageGlucose Blood glucose value, in `mmol/L`
type AverageGlucose struct {
	Units AverageGlucoseUnits `json:"units"`

	// Value A floating point value representing a `mmol/L` value.
	Value float32 `json:"value"`
}

// AverageGlucoseUnits defines model for AverageGlucose.Units.
type AverageGlucoseUnits string

// Clinic Clinic
type Clinic struct {
	// Address Street address.
	Address    *string `json:"address,omitempty"`
	CanMigrate *bool   `json:"canMigrate,omitempty"`

	// City City name.
	City       *string           `json:"city,omitempty"`
	ClinicSize *ClinicClinicSize `json:"clinicSize,omitempty"`
	ClinicType *ClinicClinicType `json:"clinicType,omitempty"`

	// Country Country name.
	Country     *string    `json:"country,omitempty"`
	CreatedTime *time.Time `json:"createdTime,omitempty"`

	// Id Clinic identifier.
	Id                    *Id         `json:"id,omitempty"`
	LastDeletedPatientTag *PatientTag `json:"lastDeletedPatientTag,omitempty"`

	// Name Name of the clinic.
	Name        string        `json:"name"`
	PatientTags *[]PatientTag `json:"patientTags,omitempty"`

	// PhoneNumbers An array of phone numbers.
	PhoneNumbers *[]PhoneNumber `json:"phoneNumbers,omitempty"`

	// PostalCode Postal code. In the U.S., typically the zip code such as `94301` or `94301-1704`.
	PostalCode       *string                `json:"postalCode,omitempty"`
	PreferredBgUnits ClinicPreferredBgUnits `json:"preferredBgUnits"`

	// ShareCode Globally unique share code for a clinic. The share code is 3 groups of 4 uppercase alphanumeric characters in each group. Ambiguous characters such as `I` and `1`, or `O` and `0` are excluded.
	ShareCode *string `json:"shareCode,omitempty"`

	// State State or province. In the U.S., typically something like `CA` or `California`.
	State                   *string                  `json:"state,omitempty"`
	SuppressedNotifications *SuppressedNotifications `json:"suppressedNotifications,omitempty"`
	Tier                    *string                  `json:"tier,omitempty"`
	TierDescription         *string                  `json:"tierDescription,omitempty"`
	UpdatedTime             *time.Time               `json:"updatedTime,omitempty"`
	Website                 *string                  `json:"website,omitempty"`
}

// ClinicClinicSize defines model for Clinic.ClinicSize.
type ClinicClinicSize string

// ClinicClinicType defines model for Clinic.ClinicType.
type ClinicClinicType string

// ClinicPreferredBgUnits defines model for Clinic.PreferredBgUnits.
type ClinicPreferredBgUnits string

// Clinician The `id` may be empty if the clinician invite has not been accepted.
type Clinician struct {
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	Email       string     `json:"email"`

	// Id String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	Id *TidepoolUserId `json:"id,omitempty"`

	// InviteId The id of the invite if it hasn't been accepted
	InviteId *string `json:"inviteId,omitempty"`

	// Name The name of the clinician
	Name        *string        `json:"name,omitempty"`
	Roles       ClinicianRoles `json:"roles"`
	UpdatedTime *time.Time     `json:"updatedTime,omitempty"`
}

// ClinicianClinicRelationship defines model for ClinicianClinicRelationship.
type ClinicianClinicRelationship struct {
	// Clinic Clinic
	Clinic Clinic `json:"clinic"`

	// Clinician The `id` may be empty if the clinician invite has not been accepted.
	Clinician Clinician `json:"clinician"`
}

// ClinicianClinicRelationships defines model for ClinicianClinicRelationships.
type ClinicianClinicRelationships = []ClinicianClinicRelationship

// ClinicianRoles defines model for ClinicianRoles.
type ClinicianRoles = []string

// Clinicians defines model for Clinicians.
type Clinicians = []Clinician

// Clinics defines model for Clinics.
type Clinics = []Clinic

// CreatePatient defines model for CreatePatient.
type CreatePatient struct {
	AttestationSubmitted *bool `json:"attestationSubmitted,omitempty"`
	IsMigrated           *bool `json:"isMigrated,omitempty"`

	// LegacyClinicianId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	LegacyClinicianId *TidepoolUserId     `json:"legacyClinicianId,omitempty"`
	Permissions       *PatientPermissions `json:"permissions,omitempty"`
}

// DataSource defines model for DataSource.
type DataSource struct {
	// DataSourceId String representation of a resource id
	DataSourceId *string `json:"dataSourceId,omitempty"`

	// ExpirationTime [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	ExpirationTime *DateTime `json:"expirationTime,omitempty"`

	// ModifiedTime [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	ModifiedTime *DateTime       `json:"modifiedTime,omitempty"`
	ProviderName string          `json:"providerName"`
	State        DataSourceState `json:"state"`
}

// DataSourceState defines model for DataSource.State.
type DataSourceState string

// DataSources defines model for DataSources.
type DataSources = []DataSource

// DateTime [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
type DateTime = string

// EHRDestinationIds defines model for EHRDestinationIds.
type EHRDestinationIds struct {
	// Flowsheet Destination ID override for Flowsheets
	Flowsheet string `json:"flowsheet"`

	// Notes Destination ID override for Notes
	Notes string `json:"notes"`

	// Results Destination ID override for Results
	Results string `json:"results"`
}

// EHRFacility defines model for EHRFacility.
type EHRFacility struct {
	// Name Ordering Facility Name
	Name string `json:"name"`
}

// EHRMatchAction defines model for EHRMatchAction.
type EHRMatchAction struct {
	ActionType EHRMatchActionActionType `json:"actionType"`
}

// EHRMatchActionActionType defines model for EHRMatchAction.ActionType.
type EHRMatchActionActionType string

// EHRMatchMessageRef defines model for EHRMatchMessageRef.
type EHRMatchMessageRef struct {
	DataModel  EHRMatchMessageRefDataModel `json:"dataModel"`
	DocumentId string                      `json:"documentId"`
	EventType  EHRMatchMessageRefEventType `json:"eventType"`
}

// EHRMatchMessageRefDataModel defines model for EHRMatchMessageRef.DataModel.
type EHRMatchMessageRefDataModel string

// EHRMatchMessageRefEventType defines model for EHRMatchMessageRef.EventType.
type EHRMatchMessageRefEventType string

// EHRMatchRequest defines model for EHRMatchRequest.
type EHRMatchRequest struct {
	MessageRef *EHRMatchMessageRef `json:"messageRef,omitempty"`
}

// EHRMatchResponse defines model for EHRMatchResponse.
type EHRMatchResponse struct {
	Action *EHRMatchAction `json:"action,omitempty"`

	// Clinic Clinic
	Clinic   Clinic      `json:"clinic"`
	Patients *Patients   `json:"patients,omitempty"`
	Settings EHRSettings `json:"settings"`
}

// EHRProcedureCodes defines model for EHRProcedureCodes.
type EHRProcedureCodes struct {
	DisableSummaryReports string `json:"disableSummaryReports"`

	// EnableSummaryReports Procedure Code for Summary Statistics and PDF Reports subscription
	EnableSummaryReports string `json:"enableSummaryReports"`
}

// EHRSettings defines model for EHRSettings.
type EHRSettings struct {
	DestinationIds EHRDestinationIds `json:"destinationIds"`

	// Enabled Enable or disable the EHR integration
	Enabled        bool              `json:"enabled"`
	Facility       *EHRFacility      `json:"facility,omitempty"`
	ProcedureCodes EHRProcedureCodes `json:"procedureCodes"`
	SourceId       string            `json:"sourceId"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Id Clinic identifier.
type Id = string

// MRNSettings defines model for MRNSettings.
type MRNSettings struct {
	// Required Require MRN when creating or updating patients
	Required bool `json:"required"`

	// Unique Enforce MRN uniqueness constraint
	Unique bool `json:"unique"`
}

// MembershipRestriction A user joining a clinic must match all of the defined restrictions
type MembershipRestriction struct {
	// EmailDomain The restriction applies only if the user has an email address with a matching domain
	EmailDomain string `json:"emailDomain"`

	// RequiredIdp If this attribute is set, at the time of joining the clinic the user must be authenticated against this identity provider
	RequiredIdp *string `json:"requiredIdp,omitempty"`
}

// MembershipRestrictions A user joining a clinic must match at least one of the specified membership restrictions
type MembershipRestrictions struct {
	Restrictions *[]MembershipRestriction `json:"restrictions,omitempty"`
}

// Meta defines model for Meta.
type Meta struct {
	Count *int `json:"count,omitempty"`
}

// Migration defines model for Migration.
type Migration struct {
	AttestationTime *time.Time `json:"attestationTime,omitempty"`
	CreatedTime     *time.Time `json:"createdTime,omitempty"`

	// Status The current status of the migration
	Status      *MigrationStatus `json:"status,omitempty"`
	UpdatedTime *time.Time       `json:"updatedTime,omitempty"`

	// UserId The user id of the legacy clinician account that needs to be migrated.
	UserId string `json:"userId"`
}

// MigrationStatus The current status of the migration
type MigrationStatus string

// MigrationUpdate defines model for MigrationUpdate.
type MigrationUpdate struct {
	// Status The current status of the migration
	Status MigrationStatus `json:"status"`
}

// Migrations defines model for Migrations.
type Migrations = []Migration

// Patient defines model for Patient.
type Patient struct {
	AttestationSubmitted *bool              `json:"attestationSubmitted,omitempty"`
	BirthDate            openapi_types.Date `json:"birthDate"`
	CreatedTime          *time.Time         `json:"createdTime,omitempty"`
	DataSources          *[]DataSource      `json:"dataSources"`
	Email                *string            `json:"email,omitempty"`

	// FullName The full name of the patient
	FullName string `json:"fullName"`

	// Id String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	Id                             *TidepoolUserId `json:"id,omitempty"`
	LastRequestedDexcomConnectTime *time.Time      `json:"lastRequestedDexcomConnectTime,omitempty"`
	LastUploadReminderTime         *time.Time      `json:"lastUploadReminderTime,omitempty"`

	// Mrn The medical record number of the patient
	Mrn         *string             `json:"mrn,omitempty"`
	Permissions *PatientPermissions `json:"permissions,omitempty"`

	// Summary A summary of a patients recent data
	Summary       *PatientSummary `json:"summary,omitempty"`
	Tags          *[]string       `json:"tags"`
	TargetDevices *[]string       `json:"targetDevices,omitempty"`
	UpdatedTime   *time.Time      `json:"updatedTime,omitempty"`
}

// PatientBGMPeriod Summary of a specific BGM time period (currently: 1d, 7d, 14d, 30d)
type PatientBGMPeriod struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords *float64 `json:"averageDailyRecords,omitempty"`

	// AverageGlucose Blood glucose value, in `mmol/L`
	AverageGlucose           *AverageGlucose `json:"averageGlucose,omitempty"`
	HasAverageDailyRecords   *bool           `json:"hasAverageDailyRecords,omitempty"`
	HasAverageGlucose        *bool           `json:"hasAverageGlucose,omitempty"`
	HasTimeInHighPercent     *bool           `json:"hasTimeInHighPercent,omitempty"`
	HasTimeInHighRecords     *bool           `json:"hasTimeInHighRecords,omitempty"`
	HasTimeInLowPercent      *bool           `json:"hasTimeInLowPercent,omitempty"`
	HasTimeInLowRecords      *bool           `json:"hasTimeInLowRecords,omitempty"`
	HasTimeInTargetPercent   *bool           `json:"hasTimeInTargetPercent,omitempty"`
	HasTimeInTargetRecords   *bool           `json:"hasTimeInTargetRecords,omitempty"`
	HasTimeInVeryHighPercent *bool           `json:"hasTimeInVeryHighPercent,omitempty"`
	HasTimeInVeryHighRecords *bool           `json:"hasTimeInVeryHighRecords,omitempty"`
	HasTimeInVeryLowPercent  *bool           `json:"hasTimeInVeryLowPercent,omitempty"`
	HasTimeInVeryLowRecords  *bool           `json:"hasTimeInVeryLowRecords,omitempty"`
	HasTotalRecords          *bool           `json:"hasTotalRecords,omitempty"`

	// TimeInHighPercent Percentage of time spent in high glucose range
	TimeInHighPercent *float64 `json:"timeInHighPercent,omitempty"`

	// TimeInHighRecords Counter of records in high glucose range
	TimeInHighRecords *int `json:"timeInHighRecords,omitempty"`

	// TimeInLowPercent Percentage of time spent in low glucose range
	TimeInLowPercent *float64 `json:"timeInLowPercent,omitempty"`

	// TimeInLowRecords Counter of records in low glucose range
	TimeInLowRecords *int `json:"timeInLowRecords,omitempty"`

	// TimeInTargetPercent Percentage of time spent in target glucose range
	TimeInTargetPercent *float64 `json:"timeInTargetPercent,omitempty"`

	// TimeInTargetRecords Counter of records in target glucose range
	TimeInTargetRecords *int `json:"timeInTargetRecords,omitempty"`

	// TimeInVeryHighPercent Percentage of time spent in very high glucose range
	TimeInVeryHighPercent *float64 `json:"timeInVeryHighPercent,omitempty"`

	// TimeInVeryHighRecords Counter of records in very high glucose range
	TimeInVeryHighRecords *int `json:"timeInVeryHighRecords,omitempty"`

	// TimeInVeryLowPercent Percentage of time spent in very low glucose range
	TimeInVeryLowPercent *float64 `json:"timeInVeryLowPercent,omitempty"`

	// TimeInVeryLowRecords Counter of records in very low glucose range
	TimeInVeryLowRecords *int `json:"timeInVeryLowRecords,omitempty"`

	// TotalRecords Counter of records
	TotalRecords *int `json:"totalRecords,omitempty"`
}

// PatientBGMPeriods A map to each supported BGM summary period
type PatientBGMPeriods struct {
	// N14d Summary of a specific BGM time period (currently: 1d, 7d, 14d, 30d)
	N14d *PatientBGMPeriod `json:"14d,omitempty"`

	// N1d Summary of a specific BGM time period (currently: 1d, 7d, 14d, 30d)
	N1d *PatientBGMPeriod `json:"1d,omitempty"`

	// N30d Summary of a specific BGM time period (currently: 1d, 7d, 14d, 30d)
	N30d *PatientBGMPeriod `json:"30d,omitempty"`

	// N7d Summary of a specific BGM time period (currently: 1d, 7d, 14d, 30d)
	N7d *PatientBGMPeriod `json:"7d,omitempty"`
}

// PatientBGMStats A summary of a users recent BGM glucose values
type PatientBGMStats struct {
	// Config Summary schema version and calculation configuration
	Config *PatientSummaryConfig `json:"config,omitempty"`

	// Dates dates tracked for summary calculation
	Dates *PatientSummaryDates `json:"dates,omitempty"`

	// Periods A map to each supported BGM summary period
	Periods *PatientBGMPeriods `json:"periods,omitempty"`

	// TotalHours Total hours represented in the hourly stats
	TotalHours *int `json:"totalHours,omitempty"`
}

// PatientCGMPeriod Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
type PatientCGMPeriod struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords *float64 `json:"averageDailyRecords,omitempty"`

	// AverageGlucose Blood glucose value, in `mmol/L`
	AverageGlucose *AverageGlucose `json:"averageGlucose,omitempty"`

	// GlucoseManagementIndicator A derived value which emulates A1C
	GlucoseManagementIndicator    *float64 `json:"glucoseManagementIndicator,omitempty"`
	HasAverageDailyRecords        *bool    `json:"hasAverageDailyRecords,omitempty"`
	HasAverageGlucose             *bool    `json:"hasAverageGlucose,omitempty"`
	HasGlucoseManagementIndicator *bool    `json:"hasGlucoseManagementIndicator,omitempty"`
	HasTimeCGMUseMinutes          *bool    `json:"hasTimeCGMUseMinutes,omitempty"`
	HasTimeCGMUsePercent          *bool    `json:"hasTimeCGMUsePercent,omitempty"`
	HasTimeCGMUseRecords          *bool    `json:"hasTimeCGMUseRecords,omitempty"`
	HasTimeInHighMinutes          *bool    `json:"hasTimeInHighMinutes,omitempty"`
	HasTimeInHighPercent          *bool    `json:"hasTimeInHighPercent,omitempty"`
	HasTimeInHighRecords          *bool    `json:"hasTimeInHighRecords,omitempty"`
	HasTimeInLowMinutes           *bool    `json:"hasTimeInLowMinutes,omitempty"`
	HasTimeInLowPercent           *bool    `json:"hasTimeInLowPercent,omitempty"`
	HasTimeInLowRecords           *bool    `json:"hasTimeInLowRecords,omitempty"`
	HasTimeInTargetMinutes        *bool    `json:"hasTimeInTargetMinutes,omitempty"`
	HasTimeInTargetPercent        *bool    `json:"hasTimeInTargetPercent,omitempty"`
	HasTimeInTargetRecords        *bool    `json:"hasTimeInTargetRecords,omitempty"`
	HasTimeInVeryHighMinutes      *bool    `json:"hasTimeInVeryHighMinutes,omitempty"`
	HasTimeInVeryHighPercent      *bool    `json:"hasTimeInVeryHighPercent,omitempty"`
	HasTimeInVeryHighRecords      *bool    `json:"hasTimeInVeryHighRecords,omitempty"`
	HasTimeInVeryLowMinutes       *bool    `json:"hasTimeInVeryLowMinutes,omitempty"`
	HasTimeInVeryLowPercent       *bool    `json:"hasTimeInVeryLowPercent,omitempty"`
	HasTimeInVeryLowRecords       *bool    `json:"hasTimeInVeryLowRecords,omitempty"`
	HasTotalRecords               *bool    `json:"hasTotalRecords,omitempty"`

	// TimeCGMUseMinutes Counter of minutes spent wearing a cgm
	TimeCGMUseMinutes *int `json:"timeCGMUseMinutes,omitempty"`

	// TimeCGMUsePercent Percentage of time spent wearing a cgm
	TimeCGMUsePercent *float64 `json:"timeCGMUsePercent,omitempty"`

	// TimeCGMUseRecords Counter of minutes spent wearing a cgm
	TimeCGMUseRecords *int `json:"timeCGMUseRecords,omitempty"`

	// TimeInHighMinutes Counter of minutes spent in high glucose range
	TimeInHighMinutes *int `json:"timeInHighMinutes,omitempty"`

	// TimeInHighPercent Percentage of time spent in high glucose range
	TimeInHighPercent *float64 `json:"timeInHighPercent,omitempty"`

	// TimeInHighRecords Counter of records in high glucose range
	TimeInHighRecords *int `json:"timeInHighRecords,omitempty"`

	// TimeInLowMinutes Counter of minutes spent in low glucose range
	TimeInLowMinutes *int `json:"timeInLowMinutes,omitempty"`

	// TimeInLowPercent Percentage of time spent in low glucose range
	TimeInLowPercent *float64 `json:"timeInLowPercent,omitempty"`

	// TimeInLowRecords Counter of records in low glucose range
	TimeInLowRecords *int `json:"timeInLowRecords,omitempty"`

	// TimeInTargetMinutes Counter of minutes spent in target glucose range
	TimeInTargetMinutes *int `json:"timeInTargetMinutes,omitempty"`

	// TimeInTargetPercent Percentage of time spent in target glucose range
	TimeInTargetPercent *float64 `json:"timeInTargetPercent,omitempty"`

	// TimeInTargetRecords Counter of records in target glucose range
	TimeInTargetRecords *int `json:"timeInTargetRecords,omitempty"`

	// TimeInVeryHighMinutes Counter of minutes spent in very high glucose range
	TimeInVeryHighMinutes *int `json:"timeInVeryHighMinutes,omitempty"`

	// TimeInVeryHighPercent Percentage of time spent in very high glucose range
	TimeInVeryHighPercent *float64 `json:"timeInVeryHighPercent,omitempty"`

	// TimeInVeryHighRecords Counter of records in very high glucose range
	TimeInVeryHighRecords *int `json:"timeInVeryHighRecords,omitempty"`

	// TimeInVeryLowMinutes Counter of minutes spent in very low glucose range
	TimeInVeryLowMinutes *int `json:"timeInVeryLowMinutes,omitempty"`

	// TimeInVeryLowPercent Percentage of time spent in very low glucose range
	TimeInVeryLowPercent *float64 `json:"timeInVeryLowPercent,omitempty"`

	// TimeInVeryLowRecords Counter of records in very low glucose range
	TimeInVeryLowRecords *int `json:"timeInVeryLowRecords,omitempty"`

	// TotalRecords Counter of records
	TotalRecords *int `json:"totalRecords,omitempty"`
}

// PatientCGMPeriods A map to each supported CGM summary period
type PatientCGMPeriods struct {
	// N14d Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
	N14d *PatientCGMPeriod `json:"14d,omitempty"`

	// N1d Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
	N1d *PatientCGMPeriod `json:"1d,omitempty"`

	// N30d Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
	N30d *PatientCGMPeriod `json:"30d,omitempty"`

	// N7d Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
	N7d *PatientCGMPeriod `json:"7d,omitempty"`
}

// PatientCGMStats A summary of a users recent CGM glucose values
type PatientCGMStats struct {
	// Config Summary schema version and calculation configuration
	Config *PatientSummaryConfig `json:"config,omitempty"`

	// Dates dates tracked for summary calculation
	Dates *PatientSummaryDates `json:"dates,omitempty"`

	// Periods A map to each supported CGM summary period
	Periods *PatientCGMPeriods `json:"periods,omitempty"`

	// TotalHours Total hours represented in the hourly stats
	TotalHours *int `json:"totalHours,omitempty"`
}

// PatientClinicRelationship defines model for PatientClinicRelationship.
type PatientClinicRelationship struct {
	// Clinic Clinic
	Clinic  Clinic  `json:"clinic"`
	Patient Patient `json:"patient"`
}

// PatientClinicRelationships defines model for PatientClinicRelationships.
type PatientClinicRelationships = []PatientClinicRelationship

// PatientPermissions defines model for PatientPermissions.
type PatientPermissions struct {
	Custodian *map[string]interface{} `json:"custodian,omitempty"`
	Note      *map[string]interface{} `json:"note,omitempty"`
	Upload    *map[string]interface{} `json:"upload,omitempty"`
	View      *map[string]interface{} `json:"view,omitempty"`
}

// PatientSummary A summary of a patients recent data
type PatientSummary struct {
	// BgmStats A summary of a users recent BGM glucose values
	BgmStats *PatientBGMStats `json:"bgmStats,omitempty"`

	// CgmStats A summary of a users recent CGM glucose values
	CgmStats *PatientCGMStats `json:"cgmStats,omitempty"`
}

// PatientSummaryConfig Summary schema version and calculation configuration
type PatientSummaryConfig struct {
	// HighGlucoseThreshold Threshold used for determining if a value is high
	HighGlucoseThreshold *float64 `json:"highGlucoseThreshold,omitempty"`

	// LowGlucoseThreshold Threshold used for determining if a value is low
	LowGlucoseThreshold *float64 `json:"lowGlucoseThreshold,omitempty"`

	// SchemaVersion Summary schema version
	SchemaVersion *int `json:"schemaVersion,omitempty"`

	// VeryHighGlucoseThreshold Threshold used for determining if a value is very high
	VeryHighGlucoseThreshold *float64 `json:"veryHighGlucoseThreshold,omitempty"`

	// VeryLowGlucoseThreshold Threshold used for determining if a value is very low
	VeryLowGlucoseThreshold *float64 `json:"veryLowGlucoseThreshold,omitempty"`
}

// PatientSummaryDates dates tracked for summary calculation
type PatientSummaryDates struct {
	// FirstData Date of the first included value
	FirstData         *time.Time `json:"firstData,omitempty"`
	HasFirstData      *bool      `json:"hasFirstData,omitempty"`
	HasLastData       *bool      `json:"hasLastData,omitempty"`
	HasLastUploadDate *bool      `json:"hasLastUploadDate,omitempty"`
	HasOutdatedSince  *bool      `json:"hasOutdatedSince,omitempty"`

	// LastData Date of the last calculated value
	LastData *time.Time `json:"lastData,omitempty"`

	// LastUpdatedDate Date of the last calculation
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// LastUploadDate Created date of the last calculated value
	LastUploadDate *time.Time `json:"lastUploadDate,omitempty"`

	// OutdatedSince Date of the first user upload after lastData, removed when calculated
	OutdatedSince *time.Time `json:"outdatedSince,omitempty"`
}

// PatientTag defines model for PatientTag.
type PatientTag struct {
	// Id String representation of a resource id
	Id *string `json:"id,omitempty"`

	// Name The tag display name
	Name string `json:"name"`
}

// Patients defines model for Patients.
type Patients = []Patient

// PatientsResponse defines model for PatientsResponse.
type PatientsResponse struct {
	Data *Patients `json:"data,omitempty"`
	Meta *Meta     `json:"meta,omitempty"`
}

// PhoneNumber defines model for PhoneNumber.
type PhoneNumber struct {
	Number string  `json:"number"`
	Type   *string `json:"type,omitempty"`
}

// SuppressedNotifications defines model for SuppressedNotifications.
type SuppressedNotifications struct {
	PatientClinicInvitation *bool `json:"patientClinicInvitation,omitempty"`
}

// TidepoolUserId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type TidepoolUserId = string

// TidepoolUserIds Array of Tidepool User IDs
type TidepoolUserIds = []TidepoolUserId

// Tier defines model for Tier.
type Tier string

// TriggerMigration defines model for TriggerMigration.
type TriggerMigration struct {
	AttestationSubmitted *bool `json:"attestationSubmitted,omitempty"`
}

// UpdateSuppressedNotifications defines model for UpdateSuppressedNotifications.
type UpdateSuppressedNotifications struct {
	SuppressedNotifications SuppressedNotifications `json:"suppressedNotifications"`
}

// UpdateTier defines model for UpdateTier.
type UpdateTier struct {
	Tier Tier `json:"tier"`
}

// UpdateUserDetails defines model for UpdateUserDetails.
type UpdateUserDetails struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}

// ClinicId defines model for clinicId.
type ClinicId = string

// ClinicianId defines model for clinicianId.
type ClinicianId = string

// CreatedTimeEnd defines model for createdTimeEnd.
type CreatedTimeEnd = time.Time

// CreatedTimeStart defines model for createdTimeStart.
type CreatedTimeStart = time.Time

// EhrEnabled defines model for ehrEnabled.
type EhrEnabled = bool

// Email defines model for email.
type Email = openapi_types.Email

// InviteId defines model for inviteId.
type InviteId = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// PatientId defines model for patientId.
type PatientId = string

// PatientTagId defines model for patientTagId.
type PatientTagId = string

// Role defines model for role.
type Role = string

// Search defines model for search.
type Search = string

// ShareCode defines model for shareCode.
type ShareCode = string

// Sort defines model for sort.
type Sort = string

// UserId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type UserId = TidepoolUserId

// ListAllCliniciansParams defines parameters for ListAllClinicians.
type ListAllCliniciansParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`

	// CreatedTimeStart Return records created after the given date (inclusive)
	CreatedTimeStart *CreatedTimeStart `form:"createdTimeStart,omitempty" json:"createdTimeStart,omitempty"`

	// CreatedTimeEnd Return records created before the given date (exclusive)
	CreatedTimeEnd *CreatedTimeEnd `form:"createdTimeEnd,omitempty" json:"createdTimeEnd,omitempty"`
}

// ListClinicsForClinicianParams defines parameters for ListClinicsForClinician.
type ListClinicsForClinicianParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListClinicsParams defines parameters for ListClinics.
type ListClinicsParams struct {
	Limit     *Limit     `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *Offset    `form:"offset,omitempty" json:"offset,omitempty"`
	ShareCode *ShareCode `form:"shareCode,omitempty" json:"shareCode,omitempty"`

	// CreatedTimeStart Return records created after the given date (inclusive)
	CreatedTimeStart *CreatedTimeStart `form:"createdTimeStart,omitempty" json:"createdTimeStart,omitempty"`

	// CreatedTimeEnd Return records created before the given date (exclusive)
	CreatedTimeEnd *CreatedTimeEnd `form:"createdTimeEnd,omitempty" json:"createdTimeEnd,omitempty"`

	// EhrEnabled Retrieve clinics with enabled EHR integration
	EhrEnabled *EhrEnabled `form:"ehrEnabled,omitempty" json:"ehrEnabled,omitempty"`
}

// ListCliniciansParams defines parameters for ListClinicians.
type ListCliniciansParams struct {
	// Search Full text search query
	Search *Search `form:"search,omitempty" json:"search,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Email  *Email  `form:"email,omitempty" json:"email,omitempty"`
	Role   *Role   `form:"role,omitempty" json:"role,omitempty"`
}

// ListPatientsParams defines parameters for ListPatients.
type ListPatientsParams struct {
	// Search Full text search query
	Search *Search `form:"search,omitempty" json:"search,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort Sort order and attribute (e.g. +name or -name)
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortType Summary type to sort by
	SortType *string `form:"sortType,omitempty" json:"sortType,omitempty"`

	// Period Time Period to display, filter, and sort
	Period *string `form:"period,omitempty" json:"period,omitempty"`

	// CgmTimeCGMUsePercent Percentage of time of CGM use
	CgmTimeCGMUsePercent *string `form:"cgm.timeCGMUsePercent,omitempty" json:"cgm.timeCGMUsePercent,omitempty"`

	// CgmTimeInVeryLowPercent Percentage of time below 54 mg/dL
	CgmTimeInVeryLowPercent *string `form:"cgm.timeInVeryLowPercent,omitempty" json:"cgm.timeInVeryLowPercent,omitempty"`

	// CgmTimeInLowPercent Percentage of time in range 54-70 mg/dL
	CgmTimeInLowPercent *string `form:"cgm.timeInLowPercent,omitempty" json:"cgm.timeInLowPercent,omitempty"`

	// CgmTimeInTargetPercent Percentage of time in range 70-180 mg/dL
	CgmTimeInTargetPercent *string `form:"cgm.timeInTargetPercent,omitempty" json:"cgm.timeInTargetPercent,omitempty"`

	// CgmTimeInHighPercent Percentage of time in range 180-250 mg/dL
	CgmTimeInHighPercent *string `form:"cgm.timeInHighPercent,omitempty" json:"cgm.timeInHighPercent,omitempty"`

	// CgmTimeInVeryHighPercent Percentage of time above 250 mg/dL
	CgmTimeInVeryHighPercent *string `form:"cgm.timeInVeryHighPercent,omitempty" json:"cgm.timeInVeryHighPercent,omitempty"`

	// CgmTimeCGMUseRecords Records of CGM use
	CgmTimeCGMUseRecords *string `form:"cgm.timeCGMUseRecords,omitempty" json:"cgm.timeCGMUseRecords,omitempty"`

	// CgmTimeInVeryLowRecords Records below 54 mg/dL
	CgmTimeInVeryLowRecords *string `form:"cgm.timeInVeryLowRecords,omitempty" json:"cgm.timeInVeryLowRecords,omitempty"`

	// CgmTimeInLowRecords Records in range 54-70 mg/dL
	CgmTimeInLowRecords *string `form:"cgm.timeInLowRecords,omitempty" json:"cgm.timeInLowRecords,omitempty"`

	// CgmTimeInTargetRecords Records in range 70-180 mg/dL
	CgmTimeInTargetRecords *string `form:"cgm.timeInTargetRecords,omitempty" json:"cgm.timeInTargetRecords,omitempty"`

	// CgmTimeInHighRecords Records in range 180-250 mg/dL
	CgmTimeInHighRecords *string `form:"cgm.timeInHighRecords,omitempty" json:"cgm.timeInHighRecords,omitempty"`

	// CgmTimeInVeryHighRecords Records above 250 mg/dL
	CgmTimeInVeryHighRecords *string `form:"cgm.timeInVeryHighRecords,omitempty" json:"cgm.timeInVeryHighRecords,omitempty"`

	// CgmAverageDailyRecords Average records per day
	CgmAverageDailyRecords *string `form:"cgm.averageDailyRecords,omitempty" json:"cgm.averageDailyRecords,omitempty"`

	// CgmTotalRecords Total records in period
	CgmTotalRecords *string `form:"cgm.totalRecords,omitempty" json:"cgm.totalRecords,omitempty"`

	// CgmLastUploadDateFrom Inclusive
	CgmLastUploadDateFrom *time.Time `form:"cgm.lastUploadDateFrom,omitempty" json:"cgm.lastUploadDateFrom,omitempty"`

	// CgmLastUploadDateTo Exclusive
	CgmLastUploadDateTo *time.Time `form:"cgm.lastUploadDateTo,omitempty" json:"cgm.lastUploadDateTo,omitempty"`

	// BgmTimeInVeryLowPercent Percentage of time below 54 mg/dL
	BgmTimeInVeryLowPercent *string `form:"bgm.timeInVeryLowPercent,omitempty" json:"bgm.timeInVeryLowPercent,omitempty"`

	// BgmTimeInLowPercent Percentage of time in range 54-70 mg/dL
	BgmTimeInLowPercent *string `form:"bgm.timeInLowPercent,omitempty" json:"bgm.timeInLowPercent,omitempty"`

	// BgmTimeInTargetPercent Percentage of time in range 70-180 mg/dL
	BgmTimeInTargetPercent *string `form:"bgm.timeInTargetPercent,omitempty" json:"bgm.timeInTargetPercent,omitempty"`

	// BgmTimeInHighPercent Percentage of time in range 180-250 mg/dL
	BgmTimeInHighPercent *string `form:"bgm.timeInHighPercent,omitempty" json:"bgm.timeInHighPercent,omitempty"`

	// BgmTimeInVeryHighPercent Percentage of time above 250 mg/dL
	BgmTimeInVeryHighPercent *string `form:"bgm.timeInVeryHighPercent,omitempty" json:"bgm.timeInVeryHighPercent,omitempty"`

	// BgmTimeInVeryLowRecords Records below 54 mg/dL
	BgmTimeInVeryLowRecords *string `form:"bgm.timeInVeryLowRecords,omitempty" json:"bgm.timeInVeryLowRecords,omitempty"`

	// BgmTimeInLowRecords Records in range 54-70 mg/dL
	BgmTimeInLowRecords *string `form:"bgm.timeInLowRecords,omitempty" json:"bgm.timeInLowRecords,omitempty"`

	// BgmTimeInTargetRecords Records in range 70-180 mg/dL
	BgmTimeInTargetRecords *string `form:"bgm.timeInTargetRecords,omitempty" json:"bgm.timeInTargetRecords,omitempty"`

	// BgmTimeInHighRecords Records in range 180-250 mg/dL
	BgmTimeInHighRecords *string `form:"bgm.timeInHighRecords,omitempty" json:"bgm.timeInHighRecords,omitempty"`

	// BgmTimeInVeryHighRecords Records above 250 mg/dL
	BgmTimeInVeryHighRecords *string `form:"bgm.timeInVeryHighRecords,omitempty" json:"bgm.timeInVeryHighRecords,omitempty"`

	// BgmAverageDailyRecords Average records per day
	BgmAverageDailyRecords *string `form:"bgm.averageDailyRecords,omitempty" json:"bgm.averageDailyRecords,omitempty"`

	// BgmTotalRecords Total records in period
	BgmTotalRecords *string `form:"bgm.totalRecords,omitempty" json:"bgm.totalRecords,omitempty"`

	// BgmLastUploadDateFrom Inclusive
	BgmLastUploadDateFrom *time.Time `form:"bgm.lastUploadDateFrom,omitempty" json:"bgm.lastUploadDateFrom,omitempty"`

	// BgmLastUploadDateTo Exclusive
	BgmLastUploadDateTo *time.Time `form:"bgm.lastUploadDateTo,omitempty" json:"bgm.lastUploadDateTo,omitempty"`

	// Tags Comma-separated list of patient tag IDs
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// ListClinicsForPatientParams defines parameters for ListClinicsForPatient.
type ListClinicsForPatientParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProcessEHRMessageJSONBody defines parameters for ProcessEHRMessage.
type ProcessEHRMessageJSONBody = map[string]interface{}

// CreateClinicJSONRequestBody defines body for CreateClinic for application/json ContentType.
type CreateClinicJSONRequestBody = Clinic

// UpdateClinicJSONRequestBody defines body for UpdateClinic for application/json ContentType.
type UpdateClinicJSONRequestBody = Clinic

// CreateClinicianJSONRequestBody defines body for CreateClinician for application/json ContentType.
type CreateClinicianJSONRequestBody = Clinician

// UpdateClinicianJSONRequestBody defines body for UpdateClinician for application/json ContentType.
type UpdateClinicianJSONRequestBody = Clinician

// AssociateClinicianToUserJSONRequestBody defines body for AssociateClinicianToUser for application/json ContentType.
type AssociateClinicianToUserJSONRequestBody = AssociateClinicianToUser

// UpdateMembershipRestrictionsJSONRequestBody defines body for UpdateMembershipRestrictions for application/json ContentType.
type UpdateMembershipRestrictionsJSONRequestBody = MembershipRestrictions

// TriggerInitialMigrationJSONRequestBody defines body for TriggerInitialMigration for application/json ContentType.
type TriggerInitialMigrationJSONRequestBody = TriggerMigration

// MigrateLegacyClinicianPatientsJSONRequestBody defines body for MigrateLegacyClinicianPatients for application/json ContentType.
type MigrateLegacyClinicianPatientsJSONRequestBody = Migration

// UpdateMigrationJSONRequestBody defines body for UpdateMigration for application/json ContentType.
type UpdateMigrationJSONRequestBody = MigrationUpdate

// CreatePatientTagJSONRequestBody defines body for CreatePatientTag for application/json ContentType.
type CreatePatientTagJSONRequestBody = PatientTag

// UpdatePatientTagJSONRequestBody defines body for UpdatePatientTag for application/json ContentType.
type UpdatePatientTagJSONRequestBody = PatientTag

// CreatePatientAccountJSONRequestBody defines body for CreatePatientAccount for application/json ContentType.
type CreatePatientAccountJSONRequestBody = Patient

// AssignPatientTagToClinicPatientsJSONRequestBody defines body for AssignPatientTagToClinicPatients for application/json ContentType.
type AssignPatientTagToClinicPatientsJSONRequestBody = TidepoolUserIds

// DeletePatientTagFromClinicPatientsJSONRequestBody defines body for DeletePatientTagFromClinicPatients for application/json ContentType.
type DeletePatientTagFromClinicPatientsJSONRequestBody = TidepoolUserIds

// CreatePatientFromUserJSONRequestBody defines body for CreatePatientFromUser for application/json ContentType.
type CreatePatientFromUserJSONRequestBody = CreatePatient

// UpdatePatientJSONRequestBody defines body for UpdatePatient for application/json ContentType.
type UpdatePatientJSONRequestBody = Patient

// UpdatePatientPermissionsJSONRequestBody defines body for UpdatePatientPermissions for application/json ContentType.
type UpdatePatientPermissionsJSONRequestBody = PatientPermissions

// UpdateEHRSettingsJSONRequestBody defines body for UpdateEHRSettings for application/json ContentType.
type UpdateEHRSettingsJSONRequestBody = EHRSettings

// UpdateMRNSettingsJSONRequestBody defines body for UpdateMRNSettings for application/json ContentType.
type UpdateMRNSettingsJSONRequestBody = MRNSettings

// UpdateSuppressedNotificationsJSONRequestBody defines body for UpdateSuppressedNotifications for application/json ContentType.
type UpdateSuppressedNotificationsJSONRequestBody = UpdateSuppressedNotifications

// UpdateTierJSONRequestBody defines body for UpdateTier for application/json ContentType.
type UpdateTierJSONRequestBody = UpdateTier

// UpdatePatientSummaryJSONRequestBody defines body for UpdatePatientSummary for application/json ContentType.
type UpdatePatientSummaryJSONRequestBody = PatientSummary

// UpdatePatientDataSourcesJSONRequestBody defines body for UpdatePatientDataSources for application/json ContentType.
type UpdatePatientDataSourcesJSONRequestBody = DataSources

// ProcessEHRMessageJSONRequestBody defines body for ProcessEHRMessage for application/json ContentType.
type ProcessEHRMessageJSONRequestBody = ProcessEHRMessageJSONBody

// MatchClinicAndPatientJSONRequestBody defines body for MatchClinicAndPatient for application/json ContentType.
type MatchClinicAndPatientJSONRequestBody = EHRMatchRequest

// UpdateClinicUserDetailsJSONRequestBody defines body for UpdateClinicUserDetails for application/json ContentType.
type UpdateClinicUserDetailsJSONRequestBody = UpdateUserDetails
