// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Devices_GetPumpById_FullMethodName = "/api.Devices/GetPumpById"
	Devices_ListPumps_FullMethodName   = "/api.Devices/ListPumps"
	Devices_GetCgmById_FullMethodName  = "/api.Devices/GetCgmById"
	Devices_ListCgms_FullMethodName    = "/api.Devices/ListCgms"
)

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service that returns information about Tidepool supported devices
type DevicesClient interface {
	// Get pump by id
	GetPumpById(ctx context.Context, in *GetPumpByIdRequest, opts ...grpc.CallOption) (*GetPumpByIdResponse, error)
	// List pumps
	ListPumps(ctx context.Context, in *ListPumpsRequest, opts ...grpc.CallOption) (*ListPumpsResponse, error)
	// Get cgm by id
	GetCgmById(ctx context.Context, in *GetCgmByIdRequest, opts ...grpc.CallOption) (*GetCgmByIdResponse, error)
	// List cgms
	ListCgms(ctx context.Context, in *ListCgmsRequest, opts ...grpc.CallOption) (*ListCgmsResponse, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) GetPumpById(ctx context.Context, in *GetPumpByIdRequest, opts ...grpc.CallOption) (*GetPumpByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPumpByIdResponse)
	err := c.cc.Invoke(ctx, Devices_GetPumpById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) ListPumps(ctx context.Context, in *ListPumpsRequest, opts ...grpc.CallOption) (*ListPumpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPumpsResponse)
	err := c.cc.Invoke(ctx, Devices_ListPumps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetCgmById(ctx context.Context, in *GetCgmByIdRequest, opts ...grpc.CallOption) (*GetCgmByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCgmByIdResponse)
	err := c.cc.Invoke(ctx, Devices_GetCgmById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) ListCgms(ctx context.Context, in *ListCgmsRequest, opts ...grpc.CallOption) (*ListCgmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCgmsResponse)
	err := c.cc.Invoke(ctx, Devices_ListCgms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
// All implementations must embed UnimplementedDevicesServer
// for forward compatibility
//
// A service that returns information about Tidepool supported devices
type DevicesServer interface {
	// Get pump by id
	GetPumpById(context.Context, *GetPumpByIdRequest) (*GetPumpByIdResponse, error)
	// List pumps
	ListPumps(context.Context, *ListPumpsRequest) (*ListPumpsResponse, error)
	// Get cgm by id
	GetCgmById(context.Context, *GetCgmByIdRequest) (*GetCgmByIdResponse, error)
	// List cgms
	ListCgms(context.Context, *ListCgmsRequest) (*ListCgmsResponse, error)
	mustEmbedUnimplementedDevicesServer()
}

// UnimplementedDevicesServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServer struct {
}

func (UnimplementedDevicesServer) GetPumpById(context.Context, *GetPumpByIdRequest) (*GetPumpByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPumpById not implemented")
}
func (UnimplementedDevicesServer) ListPumps(context.Context, *ListPumpsRequest) (*ListPumpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPumps not implemented")
}
func (UnimplementedDevicesServer) GetCgmById(context.Context, *GetCgmByIdRequest) (*GetCgmByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCgmById not implemented")
}
func (UnimplementedDevicesServer) ListCgms(context.Context, *ListCgmsRequest) (*ListCgmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCgms not implemented")
}
func (UnimplementedDevicesServer) mustEmbedUnimplementedDevicesServer() {}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_GetPumpById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPumpByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetPumpById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_GetPumpById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetPumpById(ctx, req.(*GetPumpByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_ListPumps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPumpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).ListPumps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_ListPumps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).ListPumps(ctx, req.(*ListPumpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetCgmById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCgmByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetCgmById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_GetCgmById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetCgmById(ctx, req.(*GetCgmByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_ListCgms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCgmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).ListCgms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_ListCgms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).ListCgms(ctx, req.(*ListCgmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPumpById",
			Handler:    _Devices_GetPumpById_Handler,
		},
		{
			MethodName: "ListPumps",
			Handler:    _Devices_ListPumps_Handler,
		},
		{
			MethodName: "GetCgmById",
			Handler:    _Devices_GetCgmById_Handler,
		},
		{
			MethodName: "ListCgms",
			Handler:    _Devices_ListCgms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
