// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AcceptPasswordChange request with any body
	AcceptPasswordChangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcceptPasswordChange(ctx context.Context, body AcceptPasswordChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptCareTeamInvite request with any body
	AcceptCareTeamInviteWithBody(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcceptCareTeamInvite(ctx context.Context, userId UserId, invitedBy InvitedByUser, body AcceptCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmAccountSignup request with any body
	ConfirmAccountSignupWithBody(ctx context.Context, key Key, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmAccountSignup(ctx context.Context, key Key, body ConfirmAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DismissInvite request with any body
	DismissInviteWithBody(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DismissInvite(ctx context.Context, userId UserId, invitedBy InvitedByUser, body DismissInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DismissAccountSignup request with any body
	DismissAccountSignupWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DismissAccountSignup(ctx context.Context, userId UserId, body DismissAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendPasswordReset request
	SendPasswordReset(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceivedInvitations request
	GetReceivedInvitations(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSentInvitations request
	GetSentInvitations(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResendAccountSignup request
	ResendAccountSignup(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendCareTeamInvite request with any body
	SendCareTeamInviteWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendCareTeamInvite(ctx context.Context, userId UserId, body SendCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendAccountSignupConfirmation request with any body
	SendAccountSignupConfirmationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendAccountSignupConfirmation(ctx context.Context, userId UserId, body SendAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountSignupConfirmation request
	GetAccountSignupConfirmation(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertAccountSignupConfirmation request with any body
	UpsertAccountSignupConfirmationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertAccountSignupConfirmation(ctx context.Context, userId UserId, body UpsertAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelAccountSignupConfirmation request with any body
	CancelAccountSignupConfirmationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelAccountSignupConfirmation(ctx context.Context, userId UserId, body CancelAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelInvite request
	CancelInvite(ctx context.Context, userId UserId, invitedBy InvitedByEmail, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AcceptPasswordChangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptPasswordChangeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptPasswordChange(ctx context.Context, body AcceptPasswordChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptPasswordChangeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptCareTeamInviteWithBody(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptCareTeamInviteRequestWithBody(c.Server, userId, invitedBy, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptCareTeamInvite(ctx context.Context, userId UserId, invitedBy InvitedByUser, body AcceptCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptCareTeamInviteRequest(c.Server, userId, invitedBy, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAccountSignupWithBody(ctx context.Context, key Key, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAccountSignupRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAccountSignup(ctx context.Context, key Key, body ConfirmAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAccountSignupRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DismissInviteWithBody(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDismissInviteRequestWithBody(c.Server, userId, invitedBy, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DismissInvite(ctx context.Context, userId UserId, invitedBy InvitedByUser, body DismissInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDismissInviteRequest(c.Server, userId, invitedBy, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DismissAccountSignupWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDismissAccountSignupRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DismissAccountSignup(ctx context.Context, userId UserId, body DismissAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDismissAccountSignupRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendPasswordReset(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendPasswordResetRequest(c.Server, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceivedInvitations(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceivedInvitationsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSentInvitations(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSentInvitationsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendAccountSignup(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendAccountSignupRequest(c.Server, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCareTeamInviteWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCareTeamInviteRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCareTeamInvite(ctx context.Context, userId UserId, body SendCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCareTeamInviteRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendAccountSignupConfirmationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendAccountSignupConfirmationRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendAccountSignupConfirmation(ctx context.Context, userId UserId, body SendAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendAccountSignupConfirmationRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountSignupConfirmation(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountSignupConfirmationRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertAccountSignupConfirmationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertAccountSignupConfirmationRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertAccountSignupConfirmation(ctx context.Context, userId UserId, body UpsertAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertAccountSignupConfirmationRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAccountSignupConfirmationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAccountSignupConfirmationRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAccountSignupConfirmation(ctx context.Context, userId UserId, body CancelAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAccountSignupConfirmationRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelInvite(ctx context.Context, userId UserId, invitedBy InvitedByEmail, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelInviteRequest(c.Server, userId, invitedBy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAcceptPasswordChangeRequest calls the generic AcceptPasswordChange builder with application/json body
func NewAcceptPasswordChangeRequest(server string, body AcceptPasswordChangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcceptPasswordChangeRequestWithBody(server, "application/json", bodyReader)
}

// NewAcceptPasswordChangeRequestWithBody generates requests for AcceptPasswordChange with any type of body
func NewAcceptPasswordChangeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/accept/forgot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAcceptCareTeamInviteRequest calls the generic AcceptCareTeamInvite builder with application/json body
func NewAcceptCareTeamInviteRequest(server string, userId UserId, invitedBy InvitedByUser, body AcceptCareTeamInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcceptCareTeamInviteRequestWithBody(server, userId, invitedBy, "application/json", bodyReader)
}

// NewAcceptCareTeamInviteRequestWithBody generates requests for AcceptCareTeamInvite with any type of body
func NewAcceptCareTeamInviteRequestWithBody(server string, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invitedBy", runtime.ParamLocationPath, invitedBy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/accept/invite/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmAccountSignupRequest calls the generic ConfirmAccountSignup builder with application/json body
func NewConfirmAccountSignupRequest(server string, key Key, body ConfirmAccountSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmAccountSignupRequestWithBody(server, key, "application/json", bodyReader)
}

// NewConfirmAccountSignupRequestWithBody generates requests for ConfirmAccountSignup with any type of body
func NewConfirmAccountSignupRequestWithBody(server string, key Key, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/accept/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDismissInviteRequest calls the generic DismissInvite builder with application/json body
func NewDismissInviteRequest(server string, userId UserId, invitedBy InvitedByUser, body DismissInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDismissInviteRequestWithBody(server, userId, invitedBy, "application/json", bodyReader)
}

// NewDismissInviteRequestWithBody generates requests for DismissInvite with any type of body
func NewDismissInviteRequestWithBody(server string, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invitedBy", runtime.ParamLocationPath, invitedBy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/dismiss/invite/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDismissAccountSignupRequest calls the generic DismissAccountSignup builder with application/json body
func NewDismissAccountSignupRequest(server string, userId UserId, body DismissAccountSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDismissAccountSignupRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewDismissAccountSignupRequestWithBody generates requests for DismissAccountSignup with any type of body
func NewDismissAccountSignupRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/dismiss/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendPasswordResetRequest generates requests for SendPasswordReset
func NewSendPasswordResetRequest(server string, email Email) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/forgot/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceivedInvitationsRequest generates requests for GetReceivedInvitations
func NewGetReceivedInvitationsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSentInvitationsRequest generates requests for GetSentInvitations
func NewGetSentInvitationsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/invite/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResendAccountSignupRequest generates requests for ResendAccountSignup
func NewResendAccountSignupRequest(server string, email Email) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/resend/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendCareTeamInviteRequest calls the generic SendCareTeamInvite builder with application/json body
func NewSendCareTeamInviteRequest(server string, userId UserId, body SendCareTeamInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendCareTeamInviteRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewSendCareTeamInviteRequestWithBody generates requests for SendCareTeamInvite with any type of body
func NewSendCareTeamInviteRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/send/invite/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendAccountSignupConfirmationRequest calls the generic SendAccountSignupConfirmation builder with application/json body
func NewSendAccountSignupConfirmationRequest(server string, userId UserId, body SendAccountSignupConfirmationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendAccountSignupConfirmationRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewSendAccountSignupConfirmationRequestWithBody generates requests for SendAccountSignupConfirmation with any type of body
func NewSendAccountSignupConfirmationRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/send/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountSignupConfirmationRequest generates requests for GetAccountSignupConfirmation
func NewGetAccountSignupConfirmationRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertAccountSignupConfirmationRequest calls the generic UpsertAccountSignupConfirmation builder with application/json body
func NewUpsertAccountSignupConfirmationRequest(server string, userId UserId, body UpsertAccountSignupConfirmationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertAccountSignupConfirmationRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpsertAccountSignupConfirmationRequestWithBody generates requests for UpsertAccountSignupConfirmation with any type of body
func NewUpsertAccountSignupConfirmationRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelAccountSignupConfirmationRequest calls the generic CancelAccountSignupConfirmation builder with application/json body
func NewCancelAccountSignupConfirmationRequest(server string, userId UserId, body CancelAccountSignupConfirmationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelAccountSignupConfirmationRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewCancelAccountSignupConfirmationRequestWithBody generates requests for CancelAccountSignupConfirmation with any type of body
func NewCancelAccountSignupConfirmationRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/signup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelInviteRequest generates requests for CancelInvite
func NewCancelInviteRequest(server string, userId UserId, invitedBy InvitedByEmail) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invitedBy", runtime.ParamLocationPath, invitedBy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/%s/invited/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AcceptPasswordChange request with any body
	AcceptPasswordChangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptPasswordChangeResponse, error)

	AcceptPasswordChangeWithResponse(ctx context.Context, body AcceptPasswordChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptPasswordChangeResponse, error)

	// AcceptCareTeamInvite request with any body
	AcceptCareTeamInviteWithBodyWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptCareTeamInviteResponse, error)

	AcceptCareTeamInviteWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, body AcceptCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptCareTeamInviteResponse, error)

	// ConfirmAccountSignup request with any body
	ConfirmAccountSignupWithBodyWithResponse(ctx context.Context, key Key, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmAccountSignupResponse, error)

	ConfirmAccountSignupWithResponse(ctx context.Context, key Key, body ConfirmAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmAccountSignupResponse, error)

	// DismissInvite request with any body
	DismissInviteWithBodyWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DismissInviteResponse, error)

	DismissInviteWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, body DismissInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*DismissInviteResponse, error)

	// DismissAccountSignup request with any body
	DismissAccountSignupWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DismissAccountSignupResponse, error)

	DismissAccountSignupWithResponse(ctx context.Context, userId UserId, body DismissAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*DismissAccountSignupResponse, error)

	// SendPasswordReset request
	SendPasswordResetWithResponse(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*SendPasswordResetResponse, error)

	// GetReceivedInvitations request
	GetReceivedInvitationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetReceivedInvitationsResponse, error)

	// GetSentInvitations request
	GetSentInvitationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetSentInvitationsResponse, error)

	// ResendAccountSignup request
	ResendAccountSignupWithResponse(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*ResendAccountSignupResponse, error)

	// SendCareTeamInvite request with any body
	SendCareTeamInviteWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCareTeamInviteResponse, error)

	SendCareTeamInviteWithResponse(ctx context.Context, userId UserId, body SendCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCareTeamInviteResponse, error)

	// SendAccountSignupConfirmation request with any body
	SendAccountSignupConfirmationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendAccountSignupConfirmationResponse, error)

	SendAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, body SendAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*SendAccountSignupConfirmationResponse, error)

	// GetAccountSignupConfirmation request
	GetAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetAccountSignupConfirmationResponse, error)

	// UpsertAccountSignupConfirmation request with any body
	UpsertAccountSignupConfirmationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertAccountSignupConfirmationResponse, error)

	UpsertAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, body UpsertAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertAccountSignupConfirmationResponse, error)

	// CancelAccountSignupConfirmation request with any body
	CancelAccountSignupConfirmationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAccountSignupConfirmationResponse, error)

	CancelAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, body CancelAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAccountSignupConfirmationResponse, error)

	// CancelInvite request
	CancelInviteWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByEmail, reqEditors ...RequestEditorFn) (*CancelInviteResponse, error)
}

type AcceptPasswordChangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON400 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptPasswordChangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptPasswordChangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptCareTeamInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON403 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptCareTeamInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptCareTeamInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmAccountSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON409 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r ConfirmAccountSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmAccountSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DismissInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r DismissInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DismissInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DismissAccountSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r DismissAccountSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DismissAccountSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendPasswordResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r SendPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceivedInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Confirmation
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r GetReceivedInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceivedInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSentInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Confirmation
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSentInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSentInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResendAccountSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r ResendAccountSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResendAccountSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendCareTeamInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Confirmation
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r SendCareTeamInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendCareTeamInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendAccountSignupConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON403 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r SendAccountSignupConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendAccountSignupConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountSignupConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Confirmation
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccountSignupConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountSignupConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertAccountSignupConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Confirmation
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON403 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r UpsertAccountSignupConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertAccountSignupConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelAccountSignupConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON403 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON404 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r CancelAccountSignupConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelAccountSignupConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON401 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
	JSON500 *struct {
		Code   int32  `json:"code"`
		Error  *int   `json:"error,omitempty"`
		Reason string `json:"reason"`
	}
}

// Status returns HTTPResponse.Status
func (r CancelInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AcceptPasswordChangeWithBodyWithResponse request with arbitrary body returning *AcceptPasswordChangeResponse
func (c *ClientWithResponses) AcceptPasswordChangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptPasswordChangeResponse, error) {
	rsp, err := c.AcceptPasswordChangeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptPasswordChangeResponse(rsp)
}

func (c *ClientWithResponses) AcceptPasswordChangeWithResponse(ctx context.Context, body AcceptPasswordChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptPasswordChangeResponse, error) {
	rsp, err := c.AcceptPasswordChange(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptPasswordChangeResponse(rsp)
}

// AcceptCareTeamInviteWithBodyWithResponse request with arbitrary body returning *AcceptCareTeamInviteResponse
func (c *ClientWithResponses) AcceptCareTeamInviteWithBodyWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptCareTeamInviteResponse, error) {
	rsp, err := c.AcceptCareTeamInviteWithBody(ctx, userId, invitedBy, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptCareTeamInviteResponse(rsp)
}

func (c *ClientWithResponses) AcceptCareTeamInviteWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, body AcceptCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptCareTeamInviteResponse, error) {
	rsp, err := c.AcceptCareTeamInvite(ctx, userId, invitedBy, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptCareTeamInviteResponse(rsp)
}

// ConfirmAccountSignupWithBodyWithResponse request with arbitrary body returning *ConfirmAccountSignupResponse
func (c *ClientWithResponses) ConfirmAccountSignupWithBodyWithResponse(ctx context.Context, key Key, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmAccountSignupResponse, error) {
	rsp, err := c.ConfirmAccountSignupWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAccountSignupResponse(rsp)
}

func (c *ClientWithResponses) ConfirmAccountSignupWithResponse(ctx context.Context, key Key, body ConfirmAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmAccountSignupResponse, error) {
	rsp, err := c.ConfirmAccountSignup(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAccountSignupResponse(rsp)
}

// DismissInviteWithBodyWithResponse request with arbitrary body returning *DismissInviteResponse
func (c *ClientWithResponses) DismissInviteWithBodyWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DismissInviteResponse, error) {
	rsp, err := c.DismissInviteWithBody(ctx, userId, invitedBy, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDismissInviteResponse(rsp)
}

func (c *ClientWithResponses) DismissInviteWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByUser, body DismissInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*DismissInviteResponse, error) {
	rsp, err := c.DismissInvite(ctx, userId, invitedBy, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDismissInviteResponse(rsp)
}

// DismissAccountSignupWithBodyWithResponse request with arbitrary body returning *DismissAccountSignupResponse
func (c *ClientWithResponses) DismissAccountSignupWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DismissAccountSignupResponse, error) {
	rsp, err := c.DismissAccountSignupWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDismissAccountSignupResponse(rsp)
}

func (c *ClientWithResponses) DismissAccountSignupWithResponse(ctx context.Context, userId UserId, body DismissAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*DismissAccountSignupResponse, error) {
	rsp, err := c.DismissAccountSignup(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDismissAccountSignupResponse(rsp)
}

// SendPasswordResetWithResponse request returning *SendPasswordResetResponse
func (c *ClientWithResponses) SendPasswordResetWithResponse(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*SendPasswordResetResponse, error) {
	rsp, err := c.SendPasswordReset(ctx, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendPasswordResetResponse(rsp)
}

// GetReceivedInvitationsWithResponse request returning *GetReceivedInvitationsResponse
func (c *ClientWithResponses) GetReceivedInvitationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetReceivedInvitationsResponse, error) {
	rsp, err := c.GetReceivedInvitations(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceivedInvitationsResponse(rsp)
}

// GetSentInvitationsWithResponse request returning *GetSentInvitationsResponse
func (c *ClientWithResponses) GetSentInvitationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetSentInvitationsResponse, error) {
	rsp, err := c.GetSentInvitations(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSentInvitationsResponse(rsp)
}

// ResendAccountSignupWithResponse request returning *ResendAccountSignupResponse
func (c *ClientWithResponses) ResendAccountSignupWithResponse(ctx context.Context, email Email, reqEditors ...RequestEditorFn) (*ResendAccountSignupResponse, error) {
	rsp, err := c.ResendAccountSignup(ctx, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendAccountSignupResponse(rsp)
}

// SendCareTeamInviteWithBodyWithResponse request with arbitrary body returning *SendCareTeamInviteResponse
func (c *ClientWithResponses) SendCareTeamInviteWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCareTeamInviteResponse, error) {
	rsp, err := c.SendCareTeamInviteWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCareTeamInviteResponse(rsp)
}

func (c *ClientWithResponses) SendCareTeamInviteWithResponse(ctx context.Context, userId UserId, body SendCareTeamInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCareTeamInviteResponse, error) {
	rsp, err := c.SendCareTeamInvite(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCareTeamInviteResponse(rsp)
}

// SendAccountSignupConfirmationWithBodyWithResponse request with arbitrary body returning *SendAccountSignupConfirmationResponse
func (c *ClientWithResponses) SendAccountSignupConfirmationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendAccountSignupConfirmationResponse, error) {
	rsp, err := c.SendAccountSignupConfirmationWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendAccountSignupConfirmationResponse(rsp)
}

func (c *ClientWithResponses) SendAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, body SendAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*SendAccountSignupConfirmationResponse, error) {
	rsp, err := c.SendAccountSignupConfirmation(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendAccountSignupConfirmationResponse(rsp)
}

// GetAccountSignupConfirmationWithResponse request returning *GetAccountSignupConfirmationResponse
func (c *ClientWithResponses) GetAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetAccountSignupConfirmationResponse, error) {
	rsp, err := c.GetAccountSignupConfirmation(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountSignupConfirmationResponse(rsp)
}

// UpsertAccountSignupConfirmationWithBodyWithResponse request with arbitrary body returning *UpsertAccountSignupConfirmationResponse
func (c *ClientWithResponses) UpsertAccountSignupConfirmationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertAccountSignupConfirmationResponse, error) {
	rsp, err := c.UpsertAccountSignupConfirmationWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertAccountSignupConfirmationResponse(rsp)
}

func (c *ClientWithResponses) UpsertAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, body UpsertAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertAccountSignupConfirmationResponse, error) {
	rsp, err := c.UpsertAccountSignupConfirmation(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertAccountSignupConfirmationResponse(rsp)
}

// CancelAccountSignupConfirmationWithBodyWithResponse request with arbitrary body returning *CancelAccountSignupConfirmationResponse
func (c *ClientWithResponses) CancelAccountSignupConfirmationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAccountSignupConfirmationResponse, error) {
	rsp, err := c.CancelAccountSignupConfirmationWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAccountSignupConfirmationResponse(rsp)
}

func (c *ClientWithResponses) CancelAccountSignupConfirmationWithResponse(ctx context.Context, userId UserId, body CancelAccountSignupConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAccountSignupConfirmationResponse, error) {
	rsp, err := c.CancelAccountSignupConfirmation(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAccountSignupConfirmationResponse(rsp)
}

// CancelInviteWithResponse request returning *CancelInviteResponse
func (c *ClientWithResponses) CancelInviteWithResponse(ctx context.Context, userId UserId, invitedBy InvitedByEmail, reqEditors ...RequestEditorFn) (*CancelInviteResponse, error) {
	rsp, err := c.CancelInvite(ctx, userId, invitedBy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelInviteResponse(rsp)
}

// ParseAcceptPasswordChangeResponse parses an HTTP response from a AcceptPasswordChangeWithResponse call
func ParseAcceptPasswordChangeResponse(rsp *http.Response) (*AcceptPasswordChangeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptPasswordChangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAcceptCareTeamInviteResponse parses an HTTP response from a AcceptCareTeamInviteWithResponse call
func ParseAcceptCareTeamInviteResponse(rsp *http.Response) (*AcceptCareTeamInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptCareTeamInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseConfirmAccountSignupResponse parses an HTTP response from a ConfirmAccountSignupWithResponse call
func ParseConfirmAccountSignupResponse(rsp *http.Response) (*ConfirmAccountSignupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmAccountSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDismissInviteResponse parses an HTTP response from a DismissInviteWithResponse call
func ParseDismissInviteResponse(rsp *http.Response) (*DismissInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DismissInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDismissAccountSignupResponse parses an HTTP response from a DismissAccountSignupWithResponse call
func ParseDismissAccountSignupResponse(rsp *http.Response) (*DismissAccountSignupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DismissAccountSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSendPasswordResetResponse parses an HTTP response from a SendPasswordResetWithResponse call
func ParseSendPasswordResetResponse(rsp *http.Response) (*SendPasswordResetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReceivedInvitationsResponse parses an HTTP response from a GetReceivedInvitationsWithResponse call
func ParseGetReceivedInvitationsResponse(rsp *http.Response) (*GetReceivedInvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceivedInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Confirmation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSentInvitationsResponse parses an HTTP response from a GetSentInvitationsWithResponse call
func ParseGetSentInvitationsResponse(rsp *http.Response) (*GetSentInvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSentInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Confirmation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseResendAccountSignupResponse parses an HTTP response from a ResendAccountSignupWithResponse call
func ParseResendAccountSignupResponse(rsp *http.Response) (*ResendAccountSignupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResendAccountSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSendCareTeamInviteResponse parses an HTTP response from a SendCareTeamInviteWithResponse call
func ParseSendCareTeamInviteResponse(rsp *http.Response) (*SendCareTeamInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendCareTeamInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Confirmation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSendAccountSignupConfirmationResponse parses an HTTP response from a SendAccountSignupConfirmationWithResponse call
func ParseSendAccountSignupConfirmationResponse(rsp *http.Response) (*SendAccountSignupConfirmationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendAccountSignupConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAccountSignupConfirmationResponse parses an HTTP response from a GetAccountSignupConfirmationWithResponse call
func ParseGetAccountSignupConfirmationResponse(rsp *http.Response) (*GetAccountSignupConfirmationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountSignupConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Confirmation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpsertAccountSignupConfirmationResponse parses an HTTP response from a UpsertAccountSignupConfirmationWithResponse call
func ParseUpsertAccountSignupConfirmationResponse(rsp *http.Response) (*UpsertAccountSignupConfirmationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertAccountSignupConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Confirmation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCancelAccountSignupConfirmationResponse parses an HTTP response from a CancelAccountSignupConfirmationWithResponse call
func ParseCancelAccountSignupConfirmationResponse(rsp *http.Response) (*CancelAccountSignupConfirmationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelAccountSignupConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelInviteResponse parses an HTTP response from a CancelInviteWithResponse call
func ParseCancelInviteResponse(rsp *http.Response) (*CancelInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   int32  `json:"code"`
			Error  *int   `json:"error,omitempty"`
			Reason string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

