// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/user (interfaces: ProfileAccessor,UserAccessor)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=./user_mock.go -package=user . ProfileAccessor,UserAccessor
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProfileAccessor is a mock of ProfileAccessor interface.
type MockProfileAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockProfileAccessorMockRecorder
	isgomock struct{}
}

// MockProfileAccessorMockRecorder is the mock recorder for MockProfileAccessor.
type MockProfileAccessorMockRecorder struct {
	mock *MockProfileAccessor
}

// NewMockProfileAccessor creates a new mock instance.
func NewMockProfileAccessor(ctrl *gomock.Controller) *MockProfileAccessor {
	mock := &MockProfileAccessor{ctrl: ctrl}
	mock.recorder = &MockProfileAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileAccessor) EXPECT() *MockProfileAccessorMockRecorder {
	return m.recorder
}

// DeleteUserProfile mocks base method.
func (m *MockProfileAccessor) DeleteUserProfile(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfile", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProfile indicates an expected call of DeleteUserProfile.
func (mr *MockProfileAccessorMockRecorder) DeleteUserProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfile", reflect.TypeOf((*MockProfileAccessor)(nil).DeleteUserProfile), ctx, userID)
}

// FindUserProfile mocks base method.
func (m *MockProfileAccessor) FindUserProfile(ctx context.Context, userID string) (*LegacyUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserProfile", ctx, userID)
	ret0, _ := ret[0].(*LegacyUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserProfile indicates an expected call of FindUserProfile.
func (mr *MockProfileAccessorMockRecorder) FindUserProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserProfile", reflect.TypeOf((*MockProfileAccessor)(nil).FindUserProfile), ctx, userID)
}

// UpdateUserProfile mocks base method.
func (m *MockProfileAccessor) UpdateUserProfile(ctx context.Context, userID string, p *LegacyUserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockProfileAccessorMockRecorder) UpdateUserProfile(ctx, userID, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockProfileAccessor)(nil).UpdateUserProfile), ctx, userID, p)
}

// UpdateUserProfileV2 mocks base method.
func (m *MockProfileAccessor) UpdateUserProfileV2(ctx context.Context, userID string, p *UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfileV2", ctx, userID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfileV2 indicates an expected call of UpdateUserProfileV2.
func (mr *MockProfileAccessorMockRecorder) UpdateUserProfileV2(ctx, userID, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileV2", reflect.TypeOf((*MockProfileAccessor)(nil).UpdateUserProfileV2), ctx, userID, p)
}

// MockUserAccessor is a mock of UserAccessor interface.
type MockUserAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccessorMockRecorder
	isgomock struct{}
}

// MockUserAccessorMockRecorder is the mock recorder for MockUserAccessor.
type MockUserAccessorMockRecorder struct {
	mock *MockUserAccessor
}

// NewMockUserAccessor creates a new mock instance.
func NewMockUserAccessor(ctrl *gomock.Controller) *MockUserAccessor {
	mock := &MockUserAccessor{ctrl: ctrl}
	mock.recorder = &MockUserAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccessor) EXPECT() *MockUserAccessorMockRecorder {
	return m.recorder
}

// DeleteUserProfile mocks base method.
func (m *MockUserAccessor) DeleteUserProfile(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfile", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProfile indicates an expected call of DeleteUserProfile.
func (mr *MockUserAccessorMockRecorder) DeleteUserProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfile", reflect.TypeOf((*MockUserAccessor)(nil).DeleteUserProfile), ctx, userID)
}

// FindUser mocks base method.
func (m *MockUserAccessor) FindUser(ctx context.Context, user *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, user)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserAccessorMockRecorder) FindUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserAccessor)(nil).FindUser), ctx, user)
}

// FindUserById mocks base method.
func (m *MockUserAccessor) FindUserById(ctx context.Context, id string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserAccessorMockRecorder) FindUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserAccessor)(nil).FindUserById), ctx, id)
}

// FindUserProfile mocks base method.
func (m *MockUserAccessor) FindUserProfile(ctx context.Context, userID string) (*LegacyUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserProfile", ctx, userID)
	ret0, _ := ret[0].(*LegacyUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserProfile indicates an expected call of FindUserProfile.
func (mr *MockUserAccessorMockRecorder) FindUserProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserProfile", reflect.TypeOf((*MockUserAccessor)(nil).FindUserProfile), ctx, userID)
}

// FindUsersWithIds mocks base method.
func (m *MockUserAccessor) FindUsersWithIds(ctx context.Context, ids []string) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersWithIds", ctx, ids)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersWithIds indicates an expected call of FindUsersWithIds.
func (mr *MockUserAccessorMockRecorder) FindUsersWithIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersWithIds", reflect.TypeOf((*MockUserAccessor)(nil).FindUsersWithIds), ctx, ids)
}

// Roles mocks base method.
func (m *MockUserAccessor) Roles(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roles indicates an expected call of Roles.
func (mr *MockUserAccessorMockRecorder) Roles(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockUserAccessor)(nil).Roles), ctx, userID)
}

// UpdateUserProfile mocks base method.
func (m *MockUserAccessor) UpdateUserProfile(ctx context.Context, userID string, p *LegacyUserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserAccessorMockRecorder) UpdateUserProfile(ctx, userID, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserAccessor)(nil).UpdateUserProfile), ctx, userID, p)
}

// UpdateUserProfileV2 mocks base method.
func (m *MockUserAccessor) UpdateUserProfileV2(ctx context.Context, userID string, p *UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfileV2", ctx, userID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfileV2 indicates an expected call of UpdateUserProfileV2.
func (mr *MockUserAccessorMockRecorder) UpdateUserProfileV2(ctx, userID, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileV2", reflect.TypeOf((*MockUserAccessor)(nil).UpdateUserProfileV2), ctx, userID, p)
}
