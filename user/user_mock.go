// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/user (interfaces: UserProfileAccessor,UserAccessor)

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserProfileAccessor is a mock of UserProfileAccessor interface.
type MockUserProfileAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileAccessorMockRecorder
}

// MockUserProfileAccessorMockRecorder is the mock recorder for MockUserProfileAccessor.
type MockUserProfileAccessorMockRecorder struct {
	mock *MockUserProfileAccessor
}

// NewMockUserProfileAccessor creates a new mock instance.
func NewMockUserProfileAccessor(ctrl *gomock.Controller) *MockUserProfileAccessor {
	mock := &MockUserProfileAccessor{ctrl: ctrl}
	mock.recorder = &MockUserProfileAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileAccessor) EXPECT() *MockUserProfileAccessorMockRecorder {
	return m.recorder
}

// DeleteUserProfile mocks base method.
func (m *MockUserProfileAccessor) DeleteUserProfile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProfile indicates an expected call of DeleteUserProfile.
func (mr *MockUserProfileAccessorMockRecorder) DeleteUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfile", reflect.TypeOf((*MockUserProfileAccessor)(nil).DeleteUserProfile), arg0, arg1)
}

// FindUserProfile mocks base method.
func (m *MockUserProfileAccessor) FindUserProfile(arg0 context.Context, arg1 string) (*UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserProfile", arg0, arg1)
	ret0, _ := ret[0].(*UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserProfile indicates an expected call of FindUserProfile.
func (mr *MockUserProfileAccessorMockRecorder) FindUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserProfile", reflect.TypeOf((*MockUserProfileAccessor)(nil).FindUserProfile), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockUserProfileAccessor) UpdateUserProfile(arg0 context.Context, arg1 string, arg2 *UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserProfileAccessorMockRecorder) UpdateUserProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserProfileAccessor)(nil).UpdateUserProfile), arg0, arg1, arg2)
}

// MockUserAccessor is a mock of UserAccessor interface.
type MockUserAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccessorMockRecorder
}

// MockUserAccessorMockRecorder is the mock recorder for MockUserAccessor.
type MockUserAccessorMockRecorder struct {
	mock *MockUserAccessor
}

// NewMockUserAccessor creates a new mock instance.
func NewMockUserAccessor(ctrl *gomock.Controller) *MockUserAccessor {
	mock := &MockUserAccessor{ctrl: ctrl}
	mock.recorder = &MockUserAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccessor) EXPECT() *MockUserAccessorMockRecorder {
	return m.recorder
}

// DeleteUserProfile mocks base method.
func (m *MockUserAccessor) DeleteUserProfile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProfile indicates an expected call of DeleteUserProfile.
func (mr *MockUserAccessorMockRecorder) DeleteUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfile", reflect.TypeOf((*MockUserAccessor)(nil).DeleteUserProfile), arg0, arg1)
}

// FindUser mocks base method.
func (m *MockUserAccessor) FindUser(arg0 context.Context, arg1 *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserAccessorMockRecorder) FindUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserAccessor)(nil).FindUser), arg0, arg1)
}

// FindUserById mocks base method.
func (m *MockUserAccessor) FindUserById(arg0 context.Context, arg1 string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserAccessorMockRecorder) FindUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserAccessor)(nil).FindUserById), arg0, arg1)
}

// FindUserProfile mocks base method.
func (m *MockUserAccessor) FindUserProfile(arg0 context.Context, arg1 string) (*UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserProfile", arg0, arg1)
	ret0, _ := ret[0].(*UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserProfile indicates an expected call of FindUserProfile.
func (mr *MockUserAccessorMockRecorder) FindUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserProfile", reflect.TypeOf((*MockUserAccessor)(nil).FindUserProfile), arg0, arg1)
}

// FindUsersWithIds mocks base method.
func (m *MockUserAccessor) FindUsersWithIds(arg0 context.Context, arg1 []string) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersWithIds", arg0, arg1)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersWithIds indicates an expected call of FindUsersWithIds.
func (mr *MockUserAccessorMockRecorder) FindUsersWithIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersWithIds", reflect.TypeOf((*MockUserAccessor)(nil).FindUsersWithIds), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockUserAccessor) UpdateUserProfile(arg0 context.Context, arg1 string, arg2 *UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserAccessorMockRecorder) UpdateUserProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserAccessor)(nil).UpdateUserProfile), arg0, arg1, arg2)
}
