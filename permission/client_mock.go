// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/permission (interfaces: ExtendedClient)

// Package permission is a generated GoMock package.
package permission

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExtendedClient is a mock of ExtendedClient interface.
type MockExtendedClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedClientMockRecorder
}

// MockExtendedClientMockRecorder is the mock recorder for MockExtendedClient.
type MockExtendedClientMockRecorder struct {
	mock *MockExtendedClient
}

// NewMockExtendedClient creates a new mock instance.
func NewMockExtendedClient(ctrl *gomock.Controller) *MockExtendedClient {
	mock := &MockExtendedClient{ctrl: ctrl}
	mock.recorder = &MockExtendedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedClient) EXPECT() *MockExtendedClientMockRecorder {
	return m.recorder
}

// GetUserPermissions mocks base method.
func (m *MockExtendedClient) GetUserPermissions(arg0 context.Context, arg1, arg2 string) (Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockExtendedClientMockRecorder) GetUserPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockExtendedClient)(nil).GetUserPermissions), arg0, arg1, arg2)
}

// GroupsForUser mocks base method.
func (m *MockExtendedClient) GroupsForUser(arg0 context.Context, arg1 string) (Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupsForUser", arg0, arg1)
	ret0, _ := ret[0].(Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupsForUser indicates an expected call of GroupsForUser.
func (mr *MockExtendedClientMockRecorder) GroupsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupsForUser", reflect.TypeOf((*MockExtendedClient)(nil).GroupsForUser), arg0, arg1)
}

// HasCustodianPermissions mocks base method.
func (m *MockExtendedClient) HasCustodianPermissions(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCustodianPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCustodianPermissions indicates an expected call of HasCustodianPermissions.
func (mr *MockExtendedClientMockRecorder) HasCustodianPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCustodianPermissions", reflect.TypeOf((*MockExtendedClient)(nil).HasCustodianPermissions), arg0, arg1, arg2)
}

// HasMembershipRelationship mocks base method.
func (m *MockExtendedClient) HasMembershipRelationship(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMembershipRelationship", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMembershipRelationship indicates an expected call of HasMembershipRelationship.
func (mr *MockExtendedClientMockRecorder) HasMembershipRelationship(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMembershipRelationship", reflect.TypeOf((*MockExtendedClient)(nil).HasMembershipRelationship), arg0, arg1, arg2)
}

// HasWritePermissions mocks base method.
func (m *MockExtendedClient) HasWritePermissions(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWritePermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasWritePermissions indicates an expected call of HasWritePermissions.
func (mr *MockExtendedClientMockRecorder) HasWritePermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWritePermissions", reflect.TypeOf((*MockExtendedClient)(nil).HasWritePermissions), arg0, arg1, arg2)
}

// UsersInGroup mocks base method.
func (m *MockExtendedClient) UsersInGroup(arg0 context.Context, arg1 string) (Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersInGroup", arg0, arg1)
	ret0, _ := ret[0].(Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersInGroup indicates an expected call of UsersInGroup.
func (mr *MockExtendedClientMockRecorder) UsersInGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersInGroup", reflect.TypeOf((*MockExtendedClient)(nil).UsersInGroup), arg0, arg1)
}
