// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/permission (interfaces: ExtendedClient)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=./client_mock.go -package=permission . ExtendedClient
//

// Package permission is a generated GoMock package.
package permission

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExtendedClient is a mock of ExtendedClient interface.
type MockExtendedClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedClientMockRecorder
	isgomock struct{}
}

// MockExtendedClientMockRecorder is the mock recorder for MockExtendedClient.
type MockExtendedClientMockRecorder struct {
	mock *MockExtendedClient
}

// NewMockExtendedClient creates a new mock instance.
func NewMockExtendedClient(ctrl *gomock.Controller) *MockExtendedClient {
	mock := &MockExtendedClient{ctrl: ctrl}
	mock.recorder = &MockExtendedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedClient) EXPECT() *MockExtendedClientMockRecorder {
	return m.recorder
}

// GetUserPermissions mocks base method.
func (m *MockExtendedClient) GetUserPermissions(ctx context.Context, requestUserID, targetUserID string) (Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", ctx, requestUserID, targetUserID)
	ret0, _ := ret[0].(Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockExtendedClientMockRecorder) GetUserPermissions(ctx, requestUserID, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockExtendedClient)(nil).GetUserPermissions), ctx, requestUserID, targetUserID)
}

// GroupsForUser mocks base method.
func (m *MockExtendedClient) GroupsForUser(ctx context.Context, granteeUserID string) (Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupsForUser", ctx, granteeUserID)
	ret0, _ := ret[0].(Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupsForUser indicates an expected call of GroupsForUser.
func (mr *MockExtendedClientMockRecorder) GroupsForUser(ctx, granteeUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupsForUser", reflect.TypeOf((*MockExtendedClient)(nil).GroupsForUser), ctx, granteeUserID)
}

// HasCustodianPermissions mocks base method.
func (m *MockExtendedClient) HasCustodianPermissions(ctx context.Context, granteeUserID, grantorUserID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCustodianPermissions", ctx, granteeUserID, grantorUserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCustodianPermissions indicates an expected call of HasCustodianPermissions.
func (mr *MockExtendedClientMockRecorder) HasCustodianPermissions(ctx, granteeUserID, grantorUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCustodianPermissions", reflect.TypeOf((*MockExtendedClient)(nil).HasCustodianPermissions), ctx, granteeUserID, grantorUserID)
}

// HasMembershipRelationship mocks base method.
func (m *MockExtendedClient) HasMembershipRelationship(ctx context.Context, granteeUserID, grantorUserID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMembershipRelationship", ctx, granteeUserID, grantorUserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMembershipRelationship indicates an expected call of HasMembershipRelationship.
func (mr *MockExtendedClientMockRecorder) HasMembershipRelationship(ctx, granteeUserID, grantorUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMembershipRelationship", reflect.TypeOf((*MockExtendedClient)(nil).HasMembershipRelationship), ctx, granteeUserID, grantorUserID)
}

// HasWritePermissions mocks base method.
func (m *MockExtendedClient) HasWritePermissions(ctx context.Context, granteeUserID, grantorUserID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWritePermissions", ctx, granteeUserID, grantorUserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasWritePermissions indicates an expected call of HasWritePermissions.
func (mr *MockExtendedClientMockRecorder) HasWritePermissions(ctx, granteeUserID, grantorUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWritePermissions", reflect.TypeOf((*MockExtendedClient)(nil).HasWritePermissions), ctx, granteeUserID, grantorUserID)
}

// UsersInGroup mocks base method.
func (m *MockExtendedClient) UsersInGroup(ctx context.Context, sharerID string) (Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersInGroup", ctx, sharerID)
	ret0, _ := ret[0].(Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersInGroup indicates an expected call of UsersInGroup.
func (mr *MockExtendedClientMockRecorder) UsersInGroup(ctx, sharerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersInGroup", reflect.TypeOf((*MockExtendedClient)(nil).UsersInGroup), ctx, sharerID)
}
