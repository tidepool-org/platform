// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=test/repository_mocks.go -package=test Repository
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	appvalidate "github.com/tidepool-org/platform/appvalidate"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, f appvalidate.Filter) (*appvalidate.AppValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, f)
	ret0, _ := ret[0].(*appvalidate.AppValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, f)
}

// GetAttestationChallenge mocks base method.
func (m *MockRepository) GetAttestationChallenge(ctx context.Context, f appvalidate.Filter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttestationChallenge", ctx, f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestationChallenge indicates an expected call of GetAttestationChallenge.
func (mr *MockRepositoryMockRecorder) GetAttestationChallenge(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestationChallenge", reflect.TypeOf((*MockRepository)(nil).GetAttestationChallenge), ctx, f)
}

// IsVerified mocks base method.
func (m *MockRepository) IsVerified(ctx context.Context, f appvalidate.Filter) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVerified", ctx, f)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVerified indicates an expected call of IsVerified.
func (mr *MockRepositoryMockRecorder) IsVerified(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVerified", reflect.TypeOf((*MockRepository)(nil).IsVerified), ctx, f)
}

// UpdateAssertion mocks base method.
func (m *MockRepository) UpdateAssertion(ctx context.Context, f appvalidate.Filter, u appvalidate.AssertionUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssertion", ctx, f, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssertion indicates an expected call of UpdateAssertion.
func (mr *MockRepositoryMockRecorder) UpdateAssertion(ctx, f, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssertion", reflect.TypeOf((*MockRepository)(nil).UpdateAssertion), ctx, f, u)
}

// UpdateAttestation mocks base method.
func (m *MockRepository) UpdateAttestation(ctx context.Context, f appvalidate.Filter, u appvalidate.AttestationUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttestation", ctx, f, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttestation indicates an expected call of UpdateAttestation.
func (mr *MockRepositoryMockRecorder) UpdateAttestation(ctx, f, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttestation", reflect.TypeOf((*MockRepository)(nil).UpdateAttestation), ctx, f, u)
}

// Upsert mocks base method.
func (m *MockRepository) Upsert(ctx context.Context, v *appvalidate.AppValidation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRepositoryMockRecorder) Upsert(ctx, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRepository)(nil).Upsert), ctx, v)
}
