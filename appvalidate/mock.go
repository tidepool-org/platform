// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/appvalidate (interfaces: Repository,ChallengeGenerator)

// Package appvalidate is a generated GoMock package.
package appvalidate

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepository) Get(arg0 context.Context, arg1 Filter) (*AppValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*AppValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), arg0, arg1)
}

// GetAttestationChallenge mocks base method.
func (m *MockRepository) GetAttestationChallenge(arg0 context.Context, arg1 Filter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttestationChallenge", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestationChallenge indicates an expected call of GetAttestationChallenge.
func (mr *MockRepositoryMockRecorder) GetAttestationChallenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestationChallenge", reflect.TypeOf((*MockRepository)(nil).GetAttestationChallenge), arg0, arg1)
}

// IsVerified mocks base method.
func (m *MockRepository) IsVerified(arg0 context.Context, arg1 Filter) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVerified", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVerified indicates an expected call of IsVerified.
func (mr *MockRepositoryMockRecorder) IsVerified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVerified", reflect.TypeOf((*MockRepository)(nil).IsVerified), arg0, arg1)
}

// UpdateAssertion mocks base method.
func (m *MockRepository) UpdateAssertion(arg0 context.Context, arg1 Filter, arg2 AssertionUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssertion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssertion indicates an expected call of UpdateAssertion.
func (mr *MockRepositoryMockRecorder) UpdateAssertion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssertion", reflect.TypeOf((*MockRepository)(nil).UpdateAssertion), arg0, arg1, arg2)
}

// UpdateAttestation mocks base method.
func (m *MockRepository) UpdateAttestation(arg0 context.Context, arg1 Filter, arg2 AttestationUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttestation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttestation indicates an expected call of UpdateAttestation.
func (mr *MockRepositoryMockRecorder) UpdateAttestation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttestation", reflect.TypeOf((*MockRepository)(nil).UpdateAttestation), arg0, arg1, arg2)
}

// Upsert mocks base method.
func (m *MockRepository) Upsert(arg0 context.Context, arg1 *AppValidation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRepositoryMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRepository)(nil).Upsert), arg0, arg1)
}

// MockChallengeGenerator is a mock of ChallengeGenerator interface.
type MockChallengeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockChallengeGeneratorMockRecorder
}

// MockChallengeGeneratorMockRecorder is the mock recorder for MockChallengeGenerator.
type MockChallengeGeneratorMockRecorder struct {
	mock *MockChallengeGenerator
}

// NewMockChallengeGenerator creates a new mock instance.
func NewMockChallengeGenerator(ctrl *gomock.Controller) *MockChallengeGenerator {
	mock := &MockChallengeGenerator{ctrl: ctrl}
	mock.recorder = &MockChallengeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengeGenerator) EXPECT() *MockChallengeGeneratorMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockChallengeGenerator) GenerateChallenge(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockChallengeGeneratorMockRecorder) GenerateChallenge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockChallengeGenerator)(nil).GenerateChallenge), arg0)
}
