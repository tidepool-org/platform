// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	work "github.com/tidepool-org/platform/work"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(ctx context.Context, create *work.Create) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(ctx, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), ctx, create)
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockClient) Get(ctx context.Context, id string) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), ctx, id)
}

// Process mocks base method.
func (m *MockClient) Process(ctx context.Context, process *work.Process) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, process)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockClientMockRecorder) Process(ctx, process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockClient)(nil).Process), ctx, process)
}

// Repeat mocks base method.
func (m *MockClient) Repeat(ctx context.Context, id string, update *work.Repeat) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repeat", ctx, id, update)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repeat indicates an expected call of Repeat.
func (mr *MockClientMockRecorder) Repeat(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repeat", reflect.TypeOf((*MockClient)(nil).Repeat), ctx, id, update)
}
