// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=test/client.go -package test Client
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	page "github.com/tidepool-org/platform/page"
	request "github.com/tidepool-org/platform/request"
	work "github.com/tidepool-org/platform/work"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(ctx context.Context, create *work.Create) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(ctx, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), ctx, create)
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, id string, condition *request.Condition) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, condition)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, id, condition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), ctx, id, condition)
}

// DeleteAllByGroupID mocks base method.
func (m *MockClient) DeleteAllByGroupID(ctx context.Context, groupID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByGroupID", ctx, groupID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllByGroupID indicates an expected call of DeleteAllByGroupID.
func (mr *MockClientMockRecorder) DeleteAllByGroupID(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByGroupID", reflect.TypeOf((*MockClient)(nil).DeleteAllByGroupID), ctx, groupID)
}

// Get mocks base method.
func (m *MockClient) Get(ctx context.Context, id string, condition *request.Condition) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, condition)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(ctx, id, condition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), ctx, id, condition)
}

// List mocks base method.
func (m *MockClient) List(ctx context.Context, filter *work.Filter, pagination *page.Pagination) ([]*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter, pagination)
	ret0, _ := ret[0].([]*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientMockRecorder) List(ctx, filter, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), ctx, filter, pagination)
}

// Poll mocks base method.
func (m *MockClient) Poll(ctx context.Context, poll *work.Poll) ([]*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", ctx, poll)
	ret0, _ := ret[0].([]*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll.
func (mr *MockClientMockRecorder) Poll(ctx, poll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockClient)(nil).Poll), ctx, poll)
}

// Update mocks base method.
func (m *MockClient) Update(ctx context.Context, id string, condition *request.Condition, update *work.Update) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, condition, update)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(ctx, id, condition, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), ctx, id, condition, update)
}
