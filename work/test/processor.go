// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go
//
// Generated by this command:
//
//	mockgen -source=processor.go -destination=test/processor.go -package test Processor
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	work "github.com/tidepool-org/platform/work"
)

// MockProcessingUpdater is a mock of ProcessingUpdater interface.
type MockProcessingUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingUpdaterMockRecorder
	isgomock struct{}
}

// MockProcessingUpdaterMockRecorder is the mock recorder for MockProcessingUpdater.
type MockProcessingUpdaterMockRecorder struct {
	mock *MockProcessingUpdater
}

// NewMockProcessingUpdater creates a new mock instance.
func NewMockProcessingUpdater(ctrl *gomock.Controller) *MockProcessingUpdater {
	mock := &MockProcessingUpdater{ctrl: ctrl}
	mock.recorder = &MockProcessingUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingUpdater) EXPECT() *MockProcessingUpdaterMockRecorder {
	return m.recorder
}

// ProcessingUpdate mocks base method.
func (m *MockProcessingUpdater) ProcessingUpdate(ctx context.Context, processingUpdate work.ProcessingUpdate) (*work.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessingUpdate", ctx, processingUpdate)
	ret0, _ := ret[0].(*work.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessingUpdate indicates an expected call of ProcessingUpdate.
func (mr *MockProcessingUpdaterMockRecorder) ProcessingUpdate(ctx, processingUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessingUpdate", reflect.TypeOf((*MockProcessingUpdater)(nil).ProcessingUpdate), ctx, processingUpdate)
}

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
	isgomock struct{}
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Frequency mocks base method.
func (m *MockProcessor) Frequency() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Frequency")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Frequency indicates an expected call of Frequency.
func (mr *MockProcessorMockRecorder) Frequency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frequency", reflect.TypeOf((*MockProcessor)(nil).Frequency))
}

// Process mocks base method.
func (m *MockProcessor) Process(ctx context.Context, wrk *work.Work, updater work.ProcessingUpdater) work.ProcessResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, wrk, updater)
	ret0, _ := ret[0].(work.ProcessResult)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcessorMockRecorder) Process(ctx, wrk, updater any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessor)(nil).Process), ctx, wrk, updater)
}

// Quantity mocks base method.
func (m *MockProcessor) Quantity() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quantity")
	ret0, _ := ret[0].(int)
	return ret0
}

// Quantity indicates an expected call of Quantity.
func (mr *MockProcessorMockRecorder) Quantity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quantity", reflect.TypeOf((*MockProcessor)(nil).Quantity))
}

// Type mocks base method.
func (m *MockProcessor) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockProcessorMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockProcessor)(nil).Type))
}
