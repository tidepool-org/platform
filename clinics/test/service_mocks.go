// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=test/service_mocks.go -package=test Client
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	url "net/url"
	reflect "reflect"

	client "github.com/tidepool-org/clinic/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetClinician mocks base method.
func (m *MockClient) GetClinician(ctx context.Context, clinicID, clinicianID string) (*client.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinician", ctx, clinicID, clinicianID)
	ret0, _ := ret[0].(*client.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinician indicates an expected call of GetClinician.
func (mr *MockClientMockRecorder) GetClinician(ctx, clinicID, clinicianID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinician", reflect.TypeOf((*MockClient)(nil).GetClinician), ctx, clinicID, clinicianID)
}

// GetEHRSettings mocks base method.
func (m *MockClient) GetEHRSettings(ctx context.Context, clinicId string) (*client.EHRSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEHRSettings", ctx, clinicId)
	ret0, _ := ret[0].(*client.EHRSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEHRSettings indicates an expected call of GetEHRSettings.
func (mr *MockClientMockRecorder) GetEHRSettings(ctx, clinicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEHRSettings", reflect.TypeOf((*MockClient)(nil).GetEHRSettings), ctx, clinicId)
}

// GetPatients mocks base method.
func (m *MockClient) GetPatients(ctx context.Context, clinicId, userToken string, params *client.ListPatientsParams, injectedParams url.Values) ([]client.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatients", ctx, clinicId, userToken, params, injectedParams)
	ret0, _ := ret[0].([]client.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatients indicates an expected call of GetPatients.
func (mr *MockClientMockRecorder) GetPatients(ctx, clinicId, userToken, params, injectedParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatients", reflect.TypeOf((*MockClient)(nil).GetPatients), ctx, clinicId, userToken, params, injectedParams)
}

// ListEHREnabledClinics mocks base method.
func (m *MockClient) ListEHREnabledClinics(ctx context.Context) ([]client.Clinic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEHREnabledClinics", ctx)
	ret0, _ := ret[0].([]client.Clinic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEHREnabledClinics indicates an expected call of ListEHREnabledClinics.
func (mr *MockClientMockRecorder) ListEHREnabledClinics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEHREnabledClinics", reflect.TypeOf((*MockClient)(nil).ListEHREnabledClinics), ctx)
}

// SharePatientAccount mocks base method.
func (m *MockClient) SharePatientAccount(ctx context.Context, clinicID, patientID string) (*client.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharePatientAccount", ctx, clinicID, patientID)
	ret0, _ := ret[0].(*client.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharePatientAccount indicates an expected call of SharePatientAccount.
func (mr *MockClientMockRecorder) SharePatientAccount(ctx, clinicID, patientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharePatientAccount", reflect.TypeOf((*MockClient)(nil).SharePatientAccount), ctx, clinicID, patientID)
}

// SyncEHRData mocks base method.
func (m *MockClient) SyncEHRData(ctx context.Context, clinicID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncEHRData", ctx, clinicID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncEHRData indicates an expected call of SyncEHRData.
func (mr *MockClientMockRecorder) SyncEHRData(ctx, clinicID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncEHRData", reflect.TypeOf((*MockClient)(nil).SyncEHRData), ctx, clinicID)
}
