// Code generated by MockGen. DO NOT EDIT.
// Source: ./mailer.go
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -source=./mailer.go -destination=./mock.go -package test MockMailer
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	events "github.com/tidepool-org/go-common/events"
	gomock "go.uber.org/mock/gomock"
)

// MockMockMailer is a mock of MockMailer interface.
type MockMockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMockMailerMockRecorder
	isgomock struct{}
}

// MockMockMailerMockRecorder is the mock recorder for MockMockMailer.
type MockMockMailerMockRecorder struct {
	mock *MockMockMailer
}

// NewMockMockMailer creates a new mock instance.
func NewMockMockMailer(ctrl *gomock.Controller) *MockMockMailer {
	mock := &MockMockMailer{ctrl: ctrl}
	mock.recorder = &MockMockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockMailer) EXPECT() *MockMockMailerMockRecorder {
	return m.recorder
}

// SendEmailTemplate mocks base method.
func (m *MockMockMailer) SendEmailTemplate(arg0 context.Context, arg1 events.SendEmailTemplateEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailTemplate indicates an expected call of SendEmailTemplate.
func (mr *MockMockMailerMockRecorder) SendEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailTemplate", reflect.TypeOf((*MockMockMailer)(nil).SendEmailTemplate), arg0, arg1)
}
