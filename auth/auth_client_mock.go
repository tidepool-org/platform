// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/auth (interfaces: Client)

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	page "github.com/tidepool-org/platform/page"
	request "github.com/tidepool-org/platform/request"
)

// MockAuthClient is a mock of Client interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// CreateUserProviderSession mocks base method.
func (m *MockAuthClient) CreateUserProviderSession(arg0 context.Context, arg1 string, arg2 *ProviderSessionCreate) (*ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProviderSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProviderSession indicates an expected call of CreateUserProviderSession.
func (mr *MockAuthClientMockRecorder) CreateUserProviderSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProviderSession", reflect.TypeOf((*MockAuthClient)(nil).CreateUserProviderSession), arg0, arg1, arg2)
}

// CreateUserRestrictedToken mocks base method.
func (m *MockAuthClient) CreateUserRestrictedToken(arg0 context.Context, arg1 string, arg2 *RestrictedTokenCreate) (*RestrictedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRestrictedToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*RestrictedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRestrictedToken indicates an expected call of CreateUserRestrictedToken.
func (mr *MockAuthClientMockRecorder) CreateUserRestrictedToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRestrictedToken", reflect.TypeOf((*MockAuthClient)(nil).CreateUserRestrictedToken), arg0, arg1, arg2)
}

// DeleteAllProviderSessions mocks base method.
func (m *MockAuthClient) DeleteAllProviderSessions(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllProviderSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllProviderSessions indicates an expected call of DeleteAllProviderSessions.
func (mr *MockAuthClientMockRecorder) DeleteAllProviderSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllProviderSessions", reflect.TypeOf((*MockAuthClient)(nil).DeleteAllProviderSessions), arg0, arg1)
}

// DeleteAllRestrictedTokens mocks base method.
func (m *MockAuthClient) DeleteAllRestrictedTokens(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRestrictedTokens", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllRestrictedTokens indicates an expected call of DeleteAllRestrictedTokens.
func (mr *MockAuthClientMockRecorder) DeleteAllRestrictedTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRestrictedTokens", reflect.TypeOf((*MockAuthClient)(nil).DeleteAllRestrictedTokens), arg0, arg1)
}

// DeleteProviderSession mocks base method.
func (m *MockAuthClient) DeleteProviderSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProviderSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProviderSession indicates an expected call of DeleteProviderSession.
func (mr *MockAuthClientMockRecorder) DeleteProviderSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProviderSession", reflect.TypeOf((*MockAuthClient)(nil).DeleteProviderSession), arg0, arg1)
}

// DeleteRestrictedToken mocks base method.
func (m *MockAuthClient) DeleteRestrictedToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestrictedToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRestrictedToken indicates an expected call of DeleteRestrictedToken.
func (mr *MockAuthClientMockRecorder) DeleteRestrictedToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestrictedToken", reflect.TypeOf((*MockAuthClient)(nil).DeleteRestrictedToken), arg0, arg1)
}

// EnsureAuthorized mocks base method.
func (m *MockAuthClient) EnsureAuthorized(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorized", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAuthorized indicates an expected call of EnsureAuthorized.
func (mr *MockAuthClientMockRecorder) EnsureAuthorized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorized", reflect.TypeOf((*MockAuthClient)(nil).EnsureAuthorized), arg0)
}

// EnsureAuthorizedService mocks base method.
func (m *MockAuthClient) EnsureAuthorizedService(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorizedService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAuthorizedService indicates an expected call of EnsureAuthorizedService.
func (mr *MockAuthClientMockRecorder) EnsureAuthorizedService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorizedService", reflect.TypeOf((*MockAuthClient)(nil).EnsureAuthorizedService), arg0)
}

// EnsureAuthorizedUser mocks base method.
func (m *MockAuthClient) EnsureAuthorizedUser(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorizedUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureAuthorizedUser indicates an expected call of EnsureAuthorizedUser.
func (mr *MockAuthClientMockRecorder) EnsureAuthorizedUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorizedUser", reflect.TypeOf((*MockAuthClient)(nil).EnsureAuthorizedUser), arg0, arg1, arg2)
}

// GetProviderSession mocks base method.
func (m *MockAuthClient) GetProviderSession(arg0 context.Context, arg1 string) (*ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderSession", arg0, arg1)
	ret0, _ := ret[0].(*ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderSession indicates an expected call of GetProviderSession.
func (mr *MockAuthClientMockRecorder) GetProviderSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderSession", reflect.TypeOf((*MockAuthClient)(nil).GetProviderSession), arg0, arg1)
}

// GetRestrictedToken mocks base method.
func (m *MockAuthClient) GetRestrictedToken(arg0 context.Context, arg1 string) (*RestrictedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictedToken", arg0, arg1)
	ret0, _ := ret[0].(*RestrictedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestrictedToken indicates an expected call of GetRestrictedToken.
func (mr *MockAuthClientMockRecorder) GetRestrictedToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictedToken", reflect.TypeOf((*MockAuthClient)(nil).GetRestrictedToken), arg0, arg1)
}

// ListUserProviderSessions mocks base method.
func (m *MockAuthClient) ListUserProviderSessions(arg0 context.Context, arg1 string, arg2 *ProviderSessionFilter, arg3 *page.Pagination) (ProviderSessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserProviderSessions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(ProviderSessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserProviderSessions indicates an expected call of ListUserProviderSessions.
func (mr *MockAuthClientMockRecorder) ListUserProviderSessions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserProviderSessions", reflect.TypeOf((*MockAuthClient)(nil).ListUserProviderSessions), arg0, arg1, arg2, arg3)
}

// ListUserRestrictedTokens mocks base method.
func (m *MockAuthClient) ListUserRestrictedTokens(arg0 context.Context, arg1 string, arg2 *RestrictedTokenFilter, arg3 *page.Pagination) (RestrictedTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRestrictedTokens", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(RestrictedTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRestrictedTokens indicates an expected call of ListUserRestrictedTokens.
func (mr *MockAuthClientMockRecorder) ListUserRestrictedTokens(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRestrictedTokens", reflect.TypeOf((*MockAuthClient)(nil).ListUserRestrictedTokens), arg0, arg1, arg2, arg3)
}

// ServerSessionToken mocks base method.
func (m *MockAuthClient) ServerSessionToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerSessionToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerSessionToken indicates an expected call of ServerSessionToken.
func (mr *MockAuthClientMockRecorder) ServerSessionToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerSessionToken", reflect.TypeOf((*MockAuthClient)(nil).ServerSessionToken))
}

// UpdateProviderSession mocks base method.
func (m *MockAuthClient) UpdateProviderSession(arg0 context.Context, arg1 string, arg2 *ProviderSessionUpdate) (*ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProviderSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProviderSession indicates an expected call of UpdateProviderSession.
func (mr *MockAuthClientMockRecorder) UpdateProviderSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProviderSession", reflect.TypeOf((*MockAuthClient)(nil).UpdateProviderSession), arg0, arg1, arg2)
}

// UpdateRestrictedToken mocks base method.
func (m *MockAuthClient) UpdateRestrictedToken(arg0 context.Context, arg1 string, arg2 *RestrictedTokenUpdate) (*RestrictedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestrictedToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*RestrictedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestrictedToken indicates an expected call of UpdateRestrictedToken.
func (mr *MockAuthClientMockRecorder) UpdateRestrictedToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestrictedToken", reflect.TypeOf((*MockAuthClient)(nil).UpdateRestrictedToken), arg0, arg1, arg2)
}

// ValidateSessionToken mocks base method.
func (m *MockAuthClient) ValidateSessionToken(arg0 context.Context, arg1 string) (request.Details, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionToken", arg0, arg1)
	ret0, _ := ret[0].(request.Details)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionToken indicates an expected call of ValidateSessionToken.
func (mr *MockAuthClientMockRecorder) ValidateSessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionToken", reflect.TypeOf((*MockAuthClient)(nil).ValidateSessionToken), arg0, arg1)
}
