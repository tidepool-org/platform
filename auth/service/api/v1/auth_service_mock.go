// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tidepool-org/platform/auth/service (interfaces: Service)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/tidepool-org/hydrophone/client"
	apple "github.com/tidepool-org/platform/apple"
	appvalidate "github.com/tidepool-org/platform/appvalidate"
	auth "github.com/tidepool-org/platform/auth"
	service "github.com/tidepool-org/platform/auth/service"
	store "github.com/tidepool-org/platform/auth/store"
	config "github.com/tidepool-org/platform/config"
	log "github.com/tidepool-org/platform/log"
	provider "github.com/tidepool-org/platform/provider"
	task "github.com/tidepool-org/platform/task"
	version "github.com/tidepool-org/platform/version"
)

// MockAuthService is a mock of Service interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// AppValidator mocks base method.
func (m *MockAuthService) AppValidator() *appvalidate.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppValidator")
	ret0, _ := ret[0].(*appvalidate.Validator)
	return ret0
}

// AppValidator indicates an expected call of AppValidator.
func (mr *MockAuthServiceMockRecorder) AppValidator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppValidator", reflect.TypeOf((*MockAuthService)(nil).AppValidator))
}

// AuthClient mocks base method.
func (m *MockAuthService) AuthClient() auth.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthClient")
	ret0, _ := ret[0].(auth.Client)
	return ret0
}

// AuthClient indicates an expected call of AuthClient.
func (mr *MockAuthServiceMockRecorder) AuthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthClient", reflect.TypeOf((*MockAuthService)(nil).AuthClient))
}

// AuthStore mocks base method.
func (m *MockAuthService) AuthStore() store.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthStore")
	ret0, _ := ret[0].(store.Store)
	return ret0
}

// AuthStore indicates an expected call of AuthStore.
func (mr *MockAuthServiceMockRecorder) AuthStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthStore", reflect.TypeOf((*MockAuthService)(nil).AuthStore))
}

// ConfigReporter mocks base method.
func (m *MockAuthService) ConfigReporter() config.Reporter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigReporter")
	ret0, _ := ret[0].(config.Reporter)
	return ret0
}

// ConfigReporter indicates an expected call of ConfigReporter.
func (mr *MockAuthServiceMockRecorder) ConfigReporter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigReporter", reflect.TypeOf((*MockAuthService)(nil).ConfigReporter))
}

// ConfirmationClient mocks base method.
func (m *MockAuthService) ConfirmationClient() api.ClientWithResponsesInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmationClient")
	ret0, _ := ret[0].(api.ClientWithResponsesInterface)
	return ret0
}

// ConfirmationClient indicates an expected call of ConfirmationClient.
func (mr *MockAuthServiceMockRecorder) ConfirmationClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmationClient", reflect.TypeOf((*MockAuthService)(nil).ConfirmationClient))
}

// DeviceCheck mocks base method.
func (m *MockAuthService) DeviceCheck() apple.DeviceCheck {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceCheck")
	ret0, _ := ret[0].(apple.DeviceCheck)
	return ret0
}

// DeviceCheck indicates an expected call of DeviceCheck.
func (mr *MockAuthServiceMockRecorder) DeviceCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCheck", reflect.TypeOf((*MockAuthService)(nil).DeviceCheck))
}

// Domain mocks base method.
func (m *MockAuthService) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockAuthServiceMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockAuthService)(nil).Domain))
}

// Logger mocks base method.
func (m *MockAuthService) Logger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockAuthServiceMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockAuthService)(nil).Logger))
}

// PartnerSecrets mocks base method.
func (m *MockAuthService) PartnerSecrets() *appvalidate.PartnerSecrets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartnerSecrets")
	ret0, _ := ret[0].(*appvalidate.PartnerSecrets)
	return ret0
}

// PartnerSecrets indicates an expected call of PartnerSecrets.
func (mr *MockAuthServiceMockRecorder) PartnerSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartnerSecrets", reflect.TypeOf((*MockAuthService)(nil).PartnerSecrets))
}

// ProviderFactory mocks base method.
func (m *MockAuthService) ProviderFactory() provider.Factory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderFactory")
	ret0, _ := ret[0].(provider.Factory)
	return ret0
}

// ProviderFactory indicates an expected call of ProviderFactory.
func (mr *MockAuthServiceMockRecorder) ProviderFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderFactory", reflect.TypeOf((*MockAuthService)(nil).ProviderFactory))
}

// Secret mocks base method.
func (m *MockAuthService) Secret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret")
	ret0, _ := ret[0].(string)
	return ret0
}

// Secret indicates an expected call of Secret.
func (mr *MockAuthServiceMockRecorder) Secret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockAuthService)(nil).Secret))
}

// Status mocks base method.
func (m *MockAuthService) Status(arg0 context.Context) *service.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(*service.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockAuthServiceMockRecorder) Status(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAuthService)(nil).Status), arg0)
}

// TaskClient mocks base method.
func (m *MockAuthService) TaskClient() task.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskClient")
	ret0, _ := ret[0].(task.Client)
	return ret0
}

// TaskClient indicates an expected call of TaskClient.
func (mr *MockAuthServiceMockRecorder) TaskClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskClient", reflect.TypeOf((*MockAuthService)(nil).TaskClient))
}

// VersionReporter mocks base method.
func (m *MockAuthService) VersionReporter() version.Reporter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionReporter")
	ret0, _ := ret[0].(version.Reporter)
	return ret0
}

// VersionReporter indicates an expected call of VersionReporter.
func (mr *MockAuthServiceMockRecorder) VersionReporter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionReporter", reflect.TypeOf((*MockAuthService)(nil).VersionReporter))
}
