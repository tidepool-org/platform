// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	auth "github.com/tidepool-org/platform/auth"
	devicetokens "github.com/tidepool-org/platform/devicetokens"
	page "github.com/tidepool-org/platform/page"
	request "github.com/tidepool-org/platform/request"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateUserProviderSession mocks base method.
func (m *MockClient) CreateUserProviderSession(ctx context.Context, userID string, create *auth.ProviderSessionCreate) (*auth.ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProviderSession", ctx, userID, create)
	ret0, _ := ret[0].(*auth.ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProviderSession indicates an expected call of CreateUserProviderSession.
func (mr *MockClientMockRecorder) CreateUserProviderSession(ctx, userID, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProviderSession", reflect.TypeOf((*MockClient)(nil).CreateUserProviderSession), ctx, userID, create)
}

// CreateUserRestrictedToken mocks base method.
func (m *MockClient) CreateUserRestrictedToken(ctx context.Context, userID string, create *auth.RestrictedTokenCreate) (*auth.RestrictedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRestrictedToken", ctx, userID, create)
	ret0, _ := ret[0].(*auth.RestrictedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRestrictedToken indicates an expected call of CreateUserRestrictedToken.
func (mr *MockClientMockRecorder) CreateUserRestrictedToken(ctx, userID, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRestrictedToken", reflect.TypeOf((*MockClient)(nil).CreateUserRestrictedToken), ctx, userID, create)
}

// DeleteAllProviderSessions mocks base method.
func (m *MockClient) DeleteAllProviderSessions(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllProviderSessions", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllProviderSessions indicates an expected call of DeleteAllProviderSessions.
func (mr *MockClientMockRecorder) DeleteAllProviderSessions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllProviderSessions", reflect.TypeOf((*MockClient)(nil).DeleteAllProviderSessions), ctx, userID)
}

// DeleteAllRestrictedTokens mocks base method.
func (m *MockClient) DeleteAllRestrictedTokens(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRestrictedTokens", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllRestrictedTokens indicates an expected call of DeleteAllRestrictedTokens.
func (mr *MockClientMockRecorder) DeleteAllRestrictedTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRestrictedTokens", reflect.TypeOf((*MockClient)(nil).DeleteAllRestrictedTokens), ctx, userID)
}

// DeleteProviderSession mocks base method.
func (m *MockClient) DeleteProviderSession(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProviderSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProviderSession indicates an expected call of DeleteProviderSession.
func (mr *MockClientMockRecorder) DeleteProviderSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProviderSession", reflect.TypeOf((*MockClient)(nil).DeleteProviderSession), ctx, id)
}

// DeleteRestrictedToken mocks base method.
func (m *MockClient) DeleteRestrictedToken(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestrictedToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRestrictedToken indicates an expected call of DeleteRestrictedToken.
func (mr *MockClientMockRecorder) DeleteRestrictedToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestrictedToken", reflect.TypeOf((*MockClient)(nil).DeleteRestrictedToken), ctx, id)
}

// EnsureAuthorized mocks base method.
func (m *MockClient) EnsureAuthorized(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorized", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAuthorized indicates an expected call of EnsureAuthorized.
func (mr *MockClientMockRecorder) EnsureAuthorized(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorized", reflect.TypeOf((*MockClient)(nil).EnsureAuthorized), ctx)
}

// EnsureAuthorizedService mocks base method.
func (m *MockClient) EnsureAuthorizedService(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorizedService", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAuthorizedService indicates an expected call of EnsureAuthorizedService.
func (mr *MockClientMockRecorder) EnsureAuthorizedService(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorizedService", reflect.TypeOf((*MockClient)(nil).EnsureAuthorizedService), ctx)
}

// EnsureAuthorizedUser mocks base method.
func (m *MockClient) EnsureAuthorizedUser(ctx context.Context, targetUserID, permission string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorizedUser", ctx, targetUserID, permission)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureAuthorizedUser indicates an expected call of EnsureAuthorizedUser.
func (mr *MockClientMockRecorder) EnsureAuthorizedUser(ctx, targetUserID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorizedUser", reflect.TypeOf((*MockClient)(nil).EnsureAuthorizedUser), ctx, targetUserID, permission)
}

// GetDeviceTokens mocks base method.
func (m *MockClient) GetDeviceTokens(ctx context.Context, userID string) ([]*devicetokens.DeviceToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTokens", ctx, userID)
	ret0, _ := ret[0].([]*devicetokens.DeviceToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTokens indicates an expected call of GetDeviceTokens.
func (mr *MockClientMockRecorder) GetDeviceTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTokens", reflect.TypeOf((*MockClient)(nil).GetDeviceTokens), ctx, userID)
}

// GetProviderSession mocks base method.
func (m *MockClient) GetProviderSession(ctx context.Context, id string) (*auth.ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderSession", ctx, id)
	ret0, _ := ret[0].(*auth.ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderSession indicates an expected call of GetProviderSession.
func (mr *MockClientMockRecorder) GetProviderSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderSession", reflect.TypeOf((*MockClient)(nil).GetProviderSession), ctx, id)
}

// GetRestrictedToken mocks base method.
func (m *MockClient) GetRestrictedToken(ctx context.Context, id string) (*auth.RestrictedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictedToken", ctx, id)
	ret0, _ := ret[0].(*auth.RestrictedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestrictedToken indicates an expected call of GetRestrictedToken.
func (mr *MockClientMockRecorder) GetRestrictedToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictedToken", reflect.TypeOf((*MockClient)(nil).GetRestrictedToken), ctx, id)
}

// ListUserProviderSessions mocks base method.
func (m *MockClient) ListUserProviderSessions(ctx context.Context, userID string, filter *auth.ProviderSessionFilter, pagination *page.Pagination) (auth.ProviderSessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserProviderSessions", ctx, userID, filter, pagination)
	ret0, _ := ret[0].(auth.ProviderSessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserProviderSessions indicates an expected call of ListUserProviderSessions.
func (mr *MockClientMockRecorder) ListUserProviderSessions(ctx, userID, filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserProviderSessions", reflect.TypeOf((*MockClient)(nil).ListUserProviderSessions), ctx, userID, filter, pagination)
}

// ListUserRestrictedTokens mocks base method.
func (m *MockClient) ListUserRestrictedTokens(ctx context.Context, userID string, filter *auth.RestrictedTokenFilter, pagination *page.Pagination) (auth.RestrictedTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRestrictedTokens", ctx, userID, filter, pagination)
	ret0, _ := ret[0].(auth.RestrictedTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRestrictedTokens indicates an expected call of ListUserRestrictedTokens.
func (mr *MockClientMockRecorder) ListUserRestrictedTokens(ctx, userID, filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRestrictedTokens", reflect.TypeOf((*MockClient)(nil).ListUserRestrictedTokens), ctx, userID, filter, pagination)
}

// ServerSessionToken mocks base method.
func (m *MockClient) ServerSessionToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerSessionToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerSessionToken indicates an expected call of ServerSessionToken.
func (mr *MockClientMockRecorder) ServerSessionToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerSessionToken", reflect.TypeOf((*MockClient)(nil).ServerSessionToken))
}

// UpdateProviderSession mocks base method.
func (m *MockClient) UpdateProviderSession(ctx context.Context, id string, update *auth.ProviderSessionUpdate) (*auth.ProviderSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProviderSession", ctx, id, update)
	ret0, _ := ret[0].(*auth.ProviderSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProviderSession indicates an expected call of UpdateProviderSession.
func (mr *MockClientMockRecorder) UpdateProviderSession(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProviderSession", reflect.TypeOf((*MockClient)(nil).UpdateProviderSession), ctx, id, update)
}

// UpdateRestrictedToken mocks base method.
func (m *MockClient) UpdateRestrictedToken(ctx context.Context, id string, update *auth.RestrictedTokenUpdate) (*auth.RestrictedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestrictedToken", ctx, id, update)
	ret0, _ := ret[0].(*auth.RestrictedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestrictedToken indicates an expected call of UpdateRestrictedToken.
func (mr *MockClientMockRecorder) UpdateRestrictedToken(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestrictedToken", reflect.TypeOf((*MockClient)(nil).UpdateRestrictedToken), ctx, id, update)
}

// ValidateSessionToken mocks base method.
func (m *MockClient) ValidateSessionToken(ctx context.Context, token string) (request.AuthDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionToken", ctx, token)
	ret0, _ := ret[0].(request.AuthDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionToken indicates an expected call of ValidateSessionToken.
func (mr *MockClientMockRecorder) ValidateSessionToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionToken", reflect.TypeOf((*MockClient)(nil).ValidateSessionToken), ctx, token)
}

// MockExternalAccessor is a mock of ExternalAccessor interface.
type MockExternalAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAccessorMockRecorder
}

// MockExternalAccessorMockRecorder is the mock recorder for MockExternalAccessor.
type MockExternalAccessorMockRecorder struct {
	mock *MockExternalAccessor
}

// NewMockExternalAccessor creates a new mock instance.
func NewMockExternalAccessor(ctrl *gomock.Controller) *MockExternalAccessor {
	mock := &MockExternalAccessor{ctrl: ctrl}
	mock.recorder = &MockExternalAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAccessor) EXPECT() *MockExternalAccessorMockRecorder {
	return m.recorder
}

// EnsureAuthorized mocks base method.
func (m *MockExternalAccessor) EnsureAuthorized(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorized", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAuthorized indicates an expected call of EnsureAuthorized.
func (mr *MockExternalAccessorMockRecorder) EnsureAuthorized(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorized", reflect.TypeOf((*MockExternalAccessor)(nil).EnsureAuthorized), ctx)
}

// EnsureAuthorizedService mocks base method.
func (m *MockExternalAccessor) EnsureAuthorizedService(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorizedService", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAuthorizedService indicates an expected call of EnsureAuthorizedService.
func (mr *MockExternalAccessorMockRecorder) EnsureAuthorizedService(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorizedService", reflect.TypeOf((*MockExternalAccessor)(nil).EnsureAuthorizedService), ctx)
}

// EnsureAuthorizedUser mocks base method.
func (m *MockExternalAccessor) EnsureAuthorizedUser(ctx context.Context, targetUserID, permission string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAuthorizedUser", ctx, targetUserID, permission)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureAuthorizedUser indicates an expected call of EnsureAuthorizedUser.
func (mr *MockExternalAccessorMockRecorder) EnsureAuthorizedUser(ctx, targetUserID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAuthorizedUser", reflect.TypeOf((*MockExternalAccessor)(nil).EnsureAuthorizedUser), ctx, targetUserID, permission)
}

// ServerSessionToken mocks base method.
func (m *MockExternalAccessor) ServerSessionToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerSessionToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerSessionToken indicates an expected call of ServerSessionToken.
func (mr *MockExternalAccessorMockRecorder) ServerSessionToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerSessionToken", reflect.TypeOf((*MockExternalAccessor)(nil).ServerSessionToken))
}

// ValidateSessionToken mocks base method.
func (m *MockExternalAccessor) ValidateSessionToken(ctx context.Context, token string) (request.AuthDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionToken", ctx, token)
	ret0, _ := ret[0].(request.AuthDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionToken indicates an expected call of ValidateSessionToken.
func (mr *MockExternalAccessorMockRecorder) ValidateSessionToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionToken", reflect.TypeOf((*MockExternalAccessor)(nil).ValidateSessionToken), ctx, token)
}

// MockDeviceTokensClient is a mock of DeviceTokensClient interface.
type MockDeviceTokensClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceTokensClientMockRecorder
}

// MockDeviceTokensClientMockRecorder is the mock recorder for MockDeviceTokensClient.
type MockDeviceTokensClientMockRecorder struct {
	mock *MockDeviceTokensClient
}

// NewMockDeviceTokensClient creates a new mock instance.
func NewMockDeviceTokensClient(ctrl *gomock.Controller) *MockDeviceTokensClient {
	mock := &MockDeviceTokensClient{ctrl: ctrl}
	mock.recorder = &MockDeviceTokensClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceTokensClient) EXPECT() *MockDeviceTokensClientMockRecorder {
	return m.recorder
}

// GetDeviceTokens mocks base method.
func (m *MockDeviceTokensClient) GetDeviceTokens(ctx context.Context, userID string) ([]*devicetokens.DeviceToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTokens", ctx, userID)
	ret0, _ := ret[0].([]*devicetokens.DeviceToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTokens indicates an expected call of GetDeviceTokens.
func (mr *MockDeviceTokensClientMockRecorder) GetDeviceTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTokens", reflect.TypeOf((*MockDeviceTokensClient)(nil).GetDeviceTokens), ctx, userID)
}
